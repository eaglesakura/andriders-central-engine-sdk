// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorProtocol.proto

package com.eaglesakura.andriders.protocol;

public final class SensorProtocol {
  private SensorProtocol() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code eaglesakura_ace.SensorType}
   *
   * <pre>
   * センサーの種類
   * </pre>
   */
  public enum SensorType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>HeartrateMonitor = 0;</code>
     *
     * <pre>
     * ハートレートモニター
     * </pre>
     */
    HeartrateMonitor(0, 0),
    /**
     * <code>CadenceSensor = 1;</code>
     *
     * <pre>
     * ケイデンスセンサー
     * </pre>
     */
    CadenceSensor(1, 1),
    /**
     * <code>SpeedSensor = 2;</code>
     *
     * <pre>
     * スピードセンサー
     * </pre>
     */
    SpeedSensor(2, 2),
    ;

    /**
     * <code>HeartrateMonitor = 0;</code>
     *
     * <pre>
     * ハートレートモニター
     * </pre>
     */
    public static final int HeartrateMonitor_VALUE = 0;
    /**
     * <code>CadenceSensor = 1;</code>
     *
     * <pre>
     * ケイデンスセンサー
     * </pre>
     */
    public static final int CadenceSensor_VALUE = 1;
    /**
     * <code>SpeedSensor = 2;</code>
     *
     * <pre>
     * スピードセンサー
     * </pre>
     */
    public static final int SpeedSensor_VALUE = 2;


    public final int getNumber() { return value; }

    public static SensorType valueOf(int value) {
      switch (value) {
        case 0: return HeartrateMonitor;
        case 1: return CadenceSensor;
        case 2: return SpeedSensor;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SensorType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SensorType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SensorType>() {
            public SensorType findValueByNumber(int number) {
              return SensorType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.eaglesakura.andriders.protocol.SensorProtocol.getDescriptor().getEnumTypes().get(0);
    }

    private static final SensorType[] VALUES = values();

    public static SensorType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private SensorType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:eaglesakura_ace.SensorType)
  }

  public interface RawCadenceOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 rpm = 100;
    /**
     * <code>required int32 rpm = 100;</code>
     *
     * <pre>
     * 回転数
     * </pre>
     */
    boolean hasRpm();
    /**
     * <code>required int32 rpm = 100;</code>
     *
     * <pre>
     * 回転数
     * </pre>
     */
    int getRpm();

    // required .eaglesakura_ace.RawCadence.CadenceZone cadenceZone = 101;
    /**
     * <code>required .eaglesakura_ace.RawCadence.CadenceZone cadenceZone = 101;</code>
     *
     * <pre>
     * ケイデンスゾーン
     * </pre>
     */
    boolean hasCadenceZone();
    /**
     * <code>required .eaglesakura_ace.RawCadence.CadenceZone cadenceZone = 101;</code>
     *
     * <pre>
     * ケイデンスゾーン
     * </pre>
     */
    com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence.CadenceZone getCadenceZone();

    // required int32 crankRevolution = 102;
    /**
     * <code>required int32 crankRevolution = 102;</code>
     *
     * <pre>
     * センサーへ接続してからの合計回転数（クランク）
     * </pre>
     */
    boolean hasCrankRevolution();
    /**
     * <code>required int32 crankRevolution = 102;</code>
     *
     * <pre>
     * センサーへ接続してからの合計回転数（クランク）
     * </pre>
     */
    int getCrankRevolution();
  }
  /**
   * Protobuf type {@code eaglesakura_ace.RawCadence}
   *
   * <pre>
   * ケイデンス連携データ
   * </pre>
   */
  public static final class RawCadence extends
      com.google.protobuf.GeneratedMessage
      implements RawCadenceOrBuilder {
    // Use RawCadence.newBuilder() to construct.
    private RawCadence(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RawCadence(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RawCadence defaultInstance;
    public static RawCadence getDefaultInstance() {
      return defaultInstance;
    }

    public RawCadence getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RawCadence(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 800: {
              bitField0_ |= 0x00000001;
              rpm_ = input.readInt32();
              break;
            }
            case 808: {
              int rawValue = input.readEnum();
              com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence.CadenceZone value = com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence.CadenceZone.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(101, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                cadenceZone_ = value;
              }
              break;
            }
            case 816: {
              bitField0_ |= 0x00000004;
              crankRevolution_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.eaglesakura.andriders.protocol.SensorProtocol.internal_static_eaglesakura_ace_RawCadence_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.eaglesakura.andriders.protocol.SensorProtocol.internal_static_eaglesakura_ace_RawCadence_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence.class, com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence.Builder.class);
    }

    public static com.google.protobuf.Parser<RawCadence> PARSER =
        new com.google.protobuf.AbstractParser<RawCadence>() {
      public RawCadence parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RawCadence(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RawCadence> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code eaglesakura_ace.RawCadence.CadenceZone}
     */
    public enum CadenceZone
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>Slow = 0;</code>
       *
       * <pre>
       * 低ケイデンス
       * </pre>
       */
      Slow(0, 0),
      /**
       * <code>Ideal = 1;</code>
       *
       * <pre>
       * 理想値
       * 80〜110
       * </pre>
       */
      Ideal(1, 1),
      /**
       * <code>High = 2;</code>
       *
       * <pre>
       * 高ケイデンス
       * </pre>
       */
      High(2, 2),
      ;

      /**
       * <code>Slow = 0;</code>
       *
       * <pre>
       * 低ケイデンス
       * </pre>
       */
      public static final int Slow_VALUE = 0;
      /**
       * <code>Ideal = 1;</code>
       *
       * <pre>
       * 理想値
       * 80〜110
       * </pre>
       */
      public static final int Ideal_VALUE = 1;
      /**
       * <code>High = 2;</code>
       *
       * <pre>
       * 高ケイデンス
       * </pre>
       */
      public static final int High_VALUE = 2;


      public final int getNumber() { return value; }

      public static CadenceZone valueOf(int value) {
        switch (value) {
          case 0: return Slow;
          case 1: return Ideal;
          case 2: return High;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<CadenceZone>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<CadenceZone>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CadenceZone>() {
              public CadenceZone findValueByNumber(int number) {
                return CadenceZone.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence.getDescriptor().getEnumTypes().get(0);
      }

      private static final CadenceZone[] VALUES = values();

      public static CadenceZone valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private CadenceZone(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:eaglesakura_ace.RawCadence.CadenceZone)
    }

    private int bitField0_;
    // required int32 rpm = 100;
    public static final int RPM_FIELD_NUMBER = 100;
    private int rpm_;
    /**
     * <code>required int32 rpm = 100;</code>
     *
     * <pre>
     * 回転数
     * </pre>
     */
    public boolean hasRpm() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 rpm = 100;</code>
     *
     * <pre>
     * 回転数
     * </pre>
     */
    public int getRpm() {
      return rpm_;
    }

    // required .eaglesakura_ace.RawCadence.CadenceZone cadenceZone = 101;
    public static final int CADENCEZONE_FIELD_NUMBER = 101;
    private com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence.CadenceZone cadenceZone_;
    /**
     * <code>required .eaglesakura_ace.RawCadence.CadenceZone cadenceZone = 101;</code>
     *
     * <pre>
     * ケイデンスゾーン
     * </pre>
     */
    public boolean hasCadenceZone() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .eaglesakura_ace.RawCadence.CadenceZone cadenceZone = 101;</code>
     *
     * <pre>
     * ケイデンスゾーン
     * </pre>
     */
    public com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence.CadenceZone getCadenceZone() {
      return cadenceZone_;
    }

    // required int32 crankRevolution = 102;
    public static final int CRANKREVOLUTION_FIELD_NUMBER = 102;
    private int crankRevolution_;
    /**
     * <code>required int32 crankRevolution = 102;</code>
     *
     * <pre>
     * センサーへ接続してからの合計回転数（クランク）
     * </pre>
     */
    public boolean hasCrankRevolution() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 crankRevolution = 102;</code>
     *
     * <pre>
     * センサーへ接続してからの合計回転数（クランク）
     * </pre>
     */
    public int getCrankRevolution() {
      return crankRevolution_;
    }

    private void initFields() {
      rpm_ = 0;
      cadenceZone_ = com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence.CadenceZone.Slow;
      crankRevolution_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasRpm()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCadenceZone()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCrankRevolution()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(100, rpm_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(101, cadenceZone_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(102, crankRevolution_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(100, rpm_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(101, cadenceZone_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(102, crankRevolution_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code eaglesakura_ace.RawCadence}
     *
     * <pre>
     * ケイデンス連携データ
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.eaglesakura.andriders.protocol.SensorProtocol.RawCadenceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.eaglesakura.andriders.protocol.SensorProtocol.internal_static_eaglesakura_ace_RawCadence_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.eaglesakura.andriders.protocol.SensorProtocol.internal_static_eaglesakura_ace_RawCadence_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence.class, com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence.Builder.class);
      }

      // Construct using com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        rpm_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cadenceZone_ = com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence.CadenceZone.Slow;
        bitField0_ = (bitField0_ & ~0x00000002);
        crankRevolution_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.eaglesakura.andriders.protocol.SensorProtocol.internal_static_eaglesakura_ace_RawCadence_descriptor;
      }

      public com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence getDefaultInstanceForType() {
        return com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence.getDefaultInstance();
      }

      public com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence build() {
        com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence buildPartial() {
        com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence result = new com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.rpm_ = rpm_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cadenceZone_ = cadenceZone_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.crankRevolution_ = crankRevolution_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence) {
          return mergeFrom((com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence other) {
        if (other == com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence.getDefaultInstance()) return this;
        if (other.hasRpm()) {
          setRpm(other.getRpm());
        }
        if (other.hasCadenceZone()) {
          setCadenceZone(other.getCadenceZone());
        }
        if (other.hasCrankRevolution()) {
          setCrankRevolution(other.getCrankRevolution());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasRpm()) {
          
          return false;
        }
        if (!hasCadenceZone()) {
          
          return false;
        }
        if (!hasCrankRevolution()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 rpm = 100;
      private int rpm_ ;
      /**
       * <code>required int32 rpm = 100;</code>
       *
       * <pre>
       * 回転数
       * </pre>
       */
      public boolean hasRpm() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 rpm = 100;</code>
       *
       * <pre>
       * 回転数
       * </pre>
       */
      public int getRpm() {
        return rpm_;
      }
      /**
       * <code>required int32 rpm = 100;</code>
       *
       * <pre>
       * 回転数
       * </pre>
       */
      public Builder setRpm(int value) {
        bitField0_ |= 0x00000001;
        rpm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 rpm = 100;</code>
       *
       * <pre>
       * 回転数
       * </pre>
       */
      public Builder clearRpm() {
        bitField0_ = (bitField0_ & ~0x00000001);
        rpm_ = 0;
        onChanged();
        return this;
      }

      // required .eaglesakura_ace.RawCadence.CadenceZone cadenceZone = 101;
      private com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence.CadenceZone cadenceZone_ = com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence.CadenceZone.Slow;
      /**
       * <code>required .eaglesakura_ace.RawCadence.CadenceZone cadenceZone = 101;</code>
       *
       * <pre>
       * ケイデンスゾーン
       * </pre>
       */
      public boolean hasCadenceZone() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .eaglesakura_ace.RawCadence.CadenceZone cadenceZone = 101;</code>
       *
       * <pre>
       * ケイデンスゾーン
       * </pre>
       */
      public com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence.CadenceZone getCadenceZone() {
        return cadenceZone_;
      }
      /**
       * <code>required .eaglesakura_ace.RawCadence.CadenceZone cadenceZone = 101;</code>
       *
       * <pre>
       * ケイデンスゾーン
       * </pre>
       */
      public Builder setCadenceZone(com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence.CadenceZone value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        cadenceZone_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .eaglesakura_ace.RawCadence.CadenceZone cadenceZone = 101;</code>
       *
       * <pre>
       * ケイデンスゾーン
       * </pre>
       */
      public Builder clearCadenceZone() {
        bitField0_ = (bitField0_ & ~0x00000002);
        cadenceZone_ = com.eaglesakura.andriders.protocol.SensorProtocol.RawCadence.CadenceZone.Slow;
        onChanged();
        return this;
      }

      // required int32 crankRevolution = 102;
      private int crankRevolution_ ;
      /**
       * <code>required int32 crankRevolution = 102;</code>
       *
       * <pre>
       * センサーへ接続してからの合計回転数（クランク）
       * </pre>
       */
      public boolean hasCrankRevolution() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 crankRevolution = 102;</code>
       *
       * <pre>
       * センサーへ接続してからの合計回転数（クランク）
       * </pre>
       */
      public int getCrankRevolution() {
        return crankRevolution_;
      }
      /**
       * <code>required int32 crankRevolution = 102;</code>
       *
       * <pre>
       * センサーへ接続してからの合計回転数（クランク）
       * </pre>
       */
      public Builder setCrankRevolution(int value) {
        bitField0_ |= 0x00000004;
        crankRevolution_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 crankRevolution = 102;</code>
       *
       * <pre>
       * センサーへ接続してからの合計回転数（クランク）
       * </pre>
       */
      public Builder clearCrankRevolution() {
        bitField0_ = (bitField0_ & ~0x00000004);
        crankRevolution_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:eaglesakura_ace.RawCadence)
    }

    static {
      defaultInstance = new RawCadence(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:eaglesakura_ace.RawCadence)
  }

  public interface RawHeartrateOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 bpm = 100;
    /**
     * <code>required int32 bpm = 100;</code>
     *
     * <pre>
     * 心拍数
     * </pre>
     */
    boolean hasBpm();
    /**
     * <code>required int32 bpm = 100;</code>
     *
     * <pre>
     * 心拍数
     * </pre>
     */
    int getBpm();

    // required .eaglesakura_ace.RawHeartrate.HeartrateZone heartrateZone = 101;
    /**
     * <code>required .eaglesakura_ace.RawHeartrate.HeartrateZone heartrateZone = 101;</code>
     *
     * <pre>
     * 心拍ゾーン
     * 運動レベルのチェックをするが、個人差が大きいため設定値が必要
     * UIでユーザー設定値を入力する必要がある
     * </pre>
     */
    boolean hasHeartrateZone();
    /**
     * <code>required .eaglesakura_ace.RawHeartrate.HeartrateZone heartrateZone = 101;</code>
     *
     * <pre>
     * 心拍ゾーン
     * 運動レベルのチェックをするが、個人差が大きいため設定値が必要
     * UIでユーザー設定値を入力する必要がある
     * </pre>
     */
    com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate.HeartrateZone getHeartrateZone();
  }
  /**
   * Protobuf type {@code eaglesakura_ace.RawHeartrate}
   *
   * <pre>
   * 心拍連携データ
   * </pre>
   */
  public static final class RawHeartrate extends
      com.google.protobuf.GeneratedMessage
      implements RawHeartrateOrBuilder {
    // Use RawHeartrate.newBuilder() to construct.
    private RawHeartrate(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RawHeartrate(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RawHeartrate defaultInstance;
    public static RawHeartrate getDefaultInstance() {
      return defaultInstance;
    }

    public RawHeartrate getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RawHeartrate(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 800: {
              bitField0_ |= 0x00000001;
              bpm_ = input.readInt32();
              break;
            }
            case 808: {
              int rawValue = input.readEnum();
              com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate.HeartrateZone value = com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate.HeartrateZone.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(101, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                heartrateZone_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.eaglesakura.andriders.protocol.SensorProtocol.internal_static_eaglesakura_ace_RawHeartrate_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.eaglesakura.andriders.protocol.SensorProtocol.internal_static_eaglesakura_ace_RawHeartrate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate.class, com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate.Builder.class);
    }

    public static com.google.protobuf.Parser<RawHeartrate> PARSER =
        new com.google.protobuf.AbstractParser<RawHeartrate>() {
      public RawHeartrate parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RawHeartrate(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RawHeartrate> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code eaglesakura_ace.RawHeartrate.HeartrateZone}
     */
    public enum HeartrateZone
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>Repose = 0;</code>
       *
       * <pre>
       * 安静
       * </pre>
       */
      Repose(0, 0),
      /**
       * <code>Easy = 1;</code>
       *
       * <pre>
       * イージー
       * </pre>
       */
      Easy(1, 1),
      /**
       * <code>FatCombustion = 2;</code>
       *
       * <pre>
       * 脂肪燃焼
       * </pre>
       */
      FatCombustion(2, 2),
      /**
       * <code>PossessionOxygenMotion = 3;</code>
       *
       * <pre>
       * 有酸素運動
       * </pre>
       */
      PossessionOxygenMotion(3, 3),
      /**
       * <code>NonOxygenatedMotion = 4;</code>
       *
       * <pre>
       * 無酸素運動
       * </pre>
       */
      NonOxygenatedMotion(4, 4),
      /**
       * <code>Overwork = 5;</code>
       *
       * <pre>
       * オーバーワーク
       * </pre>
       */
      Overwork(5, 5),
      ;

      /**
       * <code>Repose = 0;</code>
       *
       * <pre>
       * 安静
       * </pre>
       */
      public static final int Repose_VALUE = 0;
      /**
       * <code>Easy = 1;</code>
       *
       * <pre>
       * イージー
       * </pre>
       */
      public static final int Easy_VALUE = 1;
      /**
       * <code>FatCombustion = 2;</code>
       *
       * <pre>
       * 脂肪燃焼
       * </pre>
       */
      public static final int FatCombustion_VALUE = 2;
      /**
       * <code>PossessionOxygenMotion = 3;</code>
       *
       * <pre>
       * 有酸素運動
       * </pre>
       */
      public static final int PossessionOxygenMotion_VALUE = 3;
      /**
       * <code>NonOxygenatedMotion = 4;</code>
       *
       * <pre>
       * 無酸素運動
       * </pre>
       */
      public static final int NonOxygenatedMotion_VALUE = 4;
      /**
       * <code>Overwork = 5;</code>
       *
       * <pre>
       * オーバーワーク
       * </pre>
       */
      public static final int Overwork_VALUE = 5;


      public final int getNumber() { return value; }

      public static HeartrateZone valueOf(int value) {
        switch (value) {
          case 0: return Repose;
          case 1: return Easy;
          case 2: return FatCombustion;
          case 3: return PossessionOxygenMotion;
          case 4: return NonOxygenatedMotion;
          case 5: return Overwork;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<HeartrateZone>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<HeartrateZone>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<HeartrateZone>() {
              public HeartrateZone findValueByNumber(int number) {
                return HeartrateZone.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate.getDescriptor().getEnumTypes().get(0);
      }

      private static final HeartrateZone[] VALUES = values();

      public static HeartrateZone valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private HeartrateZone(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:eaglesakura_ace.RawHeartrate.HeartrateZone)
    }

    private int bitField0_;
    // required int32 bpm = 100;
    public static final int BPM_FIELD_NUMBER = 100;
    private int bpm_;
    /**
     * <code>required int32 bpm = 100;</code>
     *
     * <pre>
     * 心拍数
     * </pre>
     */
    public boolean hasBpm() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 bpm = 100;</code>
     *
     * <pre>
     * 心拍数
     * </pre>
     */
    public int getBpm() {
      return bpm_;
    }

    // required .eaglesakura_ace.RawHeartrate.HeartrateZone heartrateZone = 101;
    public static final int HEARTRATEZONE_FIELD_NUMBER = 101;
    private com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate.HeartrateZone heartrateZone_;
    /**
     * <code>required .eaglesakura_ace.RawHeartrate.HeartrateZone heartrateZone = 101;</code>
     *
     * <pre>
     * 心拍ゾーン
     * 運動レベルのチェックをするが、個人差が大きいため設定値が必要
     * UIでユーザー設定値を入力する必要がある
     * </pre>
     */
    public boolean hasHeartrateZone() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .eaglesakura_ace.RawHeartrate.HeartrateZone heartrateZone = 101;</code>
     *
     * <pre>
     * 心拍ゾーン
     * 運動レベルのチェックをするが、個人差が大きいため設定値が必要
     * UIでユーザー設定値を入力する必要がある
     * </pre>
     */
    public com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate.HeartrateZone getHeartrateZone() {
      return heartrateZone_;
    }

    private void initFields() {
      bpm_ = 0;
      heartrateZone_ = com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate.HeartrateZone.Repose;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasBpm()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHeartrateZone()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(100, bpm_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(101, heartrateZone_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(100, bpm_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(101, heartrateZone_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code eaglesakura_ace.RawHeartrate}
     *
     * <pre>
     * 心拍連携データ
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.eaglesakura.andriders.protocol.SensorProtocol.internal_static_eaglesakura_ace_RawHeartrate_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.eaglesakura.andriders.protocol.SensorProtocol.internal_static_eaglesakura_ace_RawHeartrate_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate.class, com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate.Builder.class);
      }

      // Construct using com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bpm_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        heartrateZone_ = com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate.HeartrateZone.Repose;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.eaglesakura.andriders.protocol.SensorProtocol.internal_static_eaglesakura_ace_RawHeartrate_descriptor;
      }

      public com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate getDefaultInstanceForType() {
        return com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate.getDefaultInstance();
      }

      public com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate build() {
        com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate buildPartial() {
        com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate result = new com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bpm_ = bpm_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.heartrateZone_ = heartrateZone_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate) {
          return mergeFrom((com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate other) {
        if (other == com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate.getDefaultInstance()) return this;
        if (other.hasBpm()) {
          setBpm(other.getBpm());
        }
        if (other.hasHeartrateZone()) {
          setHeartrateZone(other.getHeartrateZone());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasBpm()) {
          
          return false;
        }
        if (!hasHeartrateZone()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 bpm = 100;
      private int bpm_ ;
      /**
       * <code>required int32 bpm = 100;</code>
       *
       * <pre>
       * 心拍数
       * </pre>
       */
      public boolean hasBpm() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 bpm = 100;</code>
       *
       * <pre>
       * 心拍数
       * </pre>
       */
      public int getBpm() {
        return bpm_;
      }
      /**
       * <code>required int32 bpm = 100;</code>
       *
       * <pre>
       * 心拍数
       * </pre>
       */
      public Builder setBpm(int value) {
        bitField0_ |= 0x00000001;
        bpm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 bpm = 100;</code>
       *
       * <pre>
       * 心拍数
       * </pre>
       */
      public Builder clearBpm() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bpm_ = 0;
        onChanged();
        return this;
      }

      // required .eaglesakura_ace.RawHeartrate.HeartrateZone heartrateZone = 101;
      private com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate.HeartrateZone heartrateZone_ = com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate.HeartrateZone.Repose;
      /**
       * <code>required .eaglesakura_ace.RawHeartrate.HeartrateZone heartrateZone = 101;</code>
       *
       * <pre>
       * 心拍ゾーン
       * 運動レベルのチェックをするが、個人差が大きいため設定値が必要
       * UIでユーザー設定値を入力する必要がある
       * </pre>
       */
      public boolean hasHeartrateZone() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .eaglesakura_ace.RawHeartrate.HeartrateZone heartrateZone = 101;</code>
       *
       * <pre>
       * 心拍ゾーン
       * 運動レベルのチェックをするが、個人差が大きいため設定値が必要
       * UIでユーザー設定値を入力する必要がある
       * </pre>
       */
      public com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate.HeartrateZone getHeartrateZone() {
        return heartrateZone_;
      }
      /**
       * <code>required .eaglesakura_ace.RawHeartrate.HeartrateZone heartrateZone = 101;</code>
       *
       * <pre>
       * 心拍ゾーン
       * 運動レベルのチェックをするが、個人差が大きいため設定値が必要
       * UIでユーザー設定値を入力する必要がある
       * </pre>
       */
      public Builder setHeartrateZone(com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate.HeartrateZone value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        heartrateZone_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .eaglesakura_ace.RawHeartrate.HeartrateZone heartrateZone = 101;</code>
       *
       * <pre>
       * 心拍ゾーン
       * 運動レベルのチェックをするが、個人差が大きいため設定値が必要
       * UIでユーザー設定値を入力する必要がある
       * </pre>
       */
      public Builder clearHeartrateZone() {
        bitField0_ = (bitField0_ & ~0x00000002);
        heartrateZone_ = com.eaglesakura.andriders.protocol.SensorProtocol.RawHeartrate.HeartrateZone.Repose;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:eaglesakura_ace.RawHeartrate)
    }

    static {
      defaultInstance = new RawHeartrate(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:eaglesakura_ace.RawHeartrate)
  }

  public interface RawSpeedOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required float speedKmPerHour = 1;
    /**
     * <code>required float speedKmPerHour = 1;</code>
     *
     * <pre>
     * スピード km/h
     * </pre>
     */
    boolean hasSpeedKmPerHour();
    /**
     * <code>required float speedKmPerHour = 1;</code>
     *
     * <pre>
     * スピード km/h
     * </pre>
     */
    float getSpeedKmPerHour();

    // optional float wheelRpm = 2;
    /**
     * <code>optional float wheelRpm = 2;</code>
     *
     * <pre>
     * ホイールの回転数
     * S&amp;Cセンサーを使用した場合は取得できるが、GPS由来は取得できないためoptional
     * </pre>
     */
    boolean hasWheelRpm();
    /**
     * <code>optional float wheelRpm = 2;</code>
     *
     * <pre>
     * ホイールの回転数
     * S&amp;Cセンサーを使用した場合は取得できるが、GPS由来は取得できないためoptional
     * </pre>
     */
    float getWheelRpm();

    // optional int32 wheelRevolution = 103;
    /**
     * <code>optional int32 wheelRevolution = 103;</code>
     *
     * <pre>
     * センサーへ接続してからの合計回転数（ホイール）
     * </pre>
     */
    boolean hasWheelRevolution();
    /**
     * <code>optional int32 wheelRevolution = 103;</code>
     *
     * <pre>
     * センサーへ接続してからの合計回転数（ホイール）
     * </pre>
     */
    int getWheelRevolution();

    // required .eaglesakura_ace.RawSpeed.SpeedZone speedZone = 101;
    /**
     * <code>required .eaglesakura_ace.RawSpeed.SpeedZone speedZone = 101;</code>
     *
     * <pre>
     * 速度ゾーン
     * </pre>
     */
    boolean hasSpeedZone();
    /**
     * <code>required .eaglesakura_ace.RawSpeed.SpeedZone speedZone = 101;</code>
     *
     * <pre>
     * 速度ゾーン
     * </pre>
     */
    com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed.SpeedZone getSpeedZone();
  }
  /**
   * Protobuf type {@code eaglesakura_ace.RawSpeed}
   *
   * <pre>
   * スピード連携データ
   * </pre>
   */
  public static final class RawSpeed extends
      com.google.protobuf.GeneratedMessage
      implements RawSpeedOrBuilder {
    // Use RawSpeed.newBuilder() to construct.
    private RawSpeed(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RawSpeed(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RawSpeed defaultInstance;
    public static RawSpeed getDefaultInstance() {
      return defaultInstance;
    }

    public RawSpeed getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RawSpeed(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              speedKmPerHour_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              wheelRpm_ = input.readFloat();
              break;
            }
            case 808: {
              int rawValue = input.readEnum();
              com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed.SpeedZone value = com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed.SpeedZone.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(101, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                speedZone_ = value;
              }
              break;
            }
            case 824: {
              bitField0_ |= 0x00000004;
              wheelRevolution_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.eaglesakura.andriders.protocol.SensorProtocol.internal_static_eaglesakura_ace_RawSpeed_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.eaglesakura.andriders.protocol.SensorProtocol.internal_static_eaglesakura_ace_RawSpeed_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed.class, com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed.Builder.class);
    }

    public static com.google.protobuf.Parser<RawSpeed> PARSER =
        new com.google.protobuf.AbstractParser<RawSpeed>() {
      public RawSpeed parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RawSpeed(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RawSpeed> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code eaglesakura_ace.RawSpeed.SpeedZone}
     *
     * <pre>
     * 速度ゾーン
     * </pre>
     */
    public enum SpeedZone
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>Stop = 0;</code>
       *
       * <pre>
       * 停止領域
       * </pre>
       */
      Stop(0, 0),
      /**
       * <code>Slow = 1;</code>
       *
       * <pre>
       * 低速
       * </pre>
       */
      Slow(1, 1),
      /**
       * <code>Cruise = 2;</code>
       *
       * <pre>
       * 巡航
       * </pre>
       */
      Cruise(2, 2),
      /**
       * <code>Sprint = 3;</code>
       *
       * <pre>
       * スプリント
       * </pre>
       */
      Sprint(3, 3),
      ;

      /**
       * <code>Stop = 0;</code>
       *
       * <pre>
       * 停止領域
       * </pre>
       */
      public static final int Stop_VALUE = 0;
      /**
       * <code>Slow = 1;</code>
       *
       * <pre>
       * 低速
       * </pre>
       */
      public static final int Slow_VALUE = 1;
      /**
       * <code>Cruise = 2;</code>
       *
       * <pre>
       * 巡航
       * </pre>
       */
      public static final int Cruise_VALUE = 2;
      /**
       * <code>Sprint = 3;</code>
       *
       * <pre>
       * スプリント
       * </pre>
       */
      public static final int Sprint_VALUE = 3;


      public final int getNumber() { return value; }

      public static SpeedZone valueOf(int value) {
        switch (value) {
          case 0: return Stop;
          case 1: return Slow;
          case 2: return Cruise;
          case 3: return Sprint;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SpeedZone>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<SpeedZone>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SpeedZone>() {
              public SpeedZone findValueByNumber(int number) {
                return SpeedZone.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed.getDescriptor().getEnumTypes().get(0);
      }

      private static final SpeedZone[] VALUES = values();

      public static SpeedZone valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private SpeedZone(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:eaglesakura_ace.RawSpeed.SpeedZone)
    }

    private int bitField0_;
    // required float speedKmPerHour = 1;
    public static final int SPEEDKMPERHOUR_FIELD_NUMBER = 1;
    private float speedKmPerHour_;
    /**
     * <code>required float speedKmPerHour = 1;</code>
     *
     * <pre>
     * スピード km/h
     * </pre>
     */
    public boolean hasSpeedKmPerHour() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required float speedKmPerHour = 1;</code>
     *
     * <pre>
     * スピード km/h
     * </pre>
     */
    public float getSpeedKmPerHour() {
      return speedKmPerHour_;
    }

    // optional float wheelRpm = 2;
    public static final int WHEELRPM_FIELD_NUMBER = 2;
    private float wheelRpm_;
    /**
     * <code>optional float wheelRpm = 2;</code>
     *
     * <pre>
     * ホイールの回転数
     * S&amp;Cセンサーを使用した場合は取得できるが、GPS由来は取得できないためoptional
     * </pre>
     */
    public boolean hasWheelRpm() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float wheelRpm = 2;</code>
     *
     * <pre>
     * ホイールの回転数
     * S&amp;Cセンサーを使用した場合は取得できるが、GPS由来は取得できないためoptional
     * </pre>
     */
    public float getWheelRpm() {
      return wheelRpm_;
    }

    // optional int32 wheelRevolution = 103;
    public static final int WHEELREVOLUTION_FIELD_NUMBER = 103;
    private int wheelRevolution_;
    /**
     * <code>optional int32 wheelRevolution = 103;</code>
     *
     * <pre>
     * センサーへ接続してからの合計回転数（ホイール）
     * </pre>
     */
    public boolean hasWheelRevolution() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 wheelRevolution = 103;</code>
     *
     * <pre>
     * センサーへ接続してからの合計回転数（ホイール）
     * </pre>
     */
    public int getWheelRevolution() {
      return wheelRevolution_;
    }

    // required .eaglesakura_ace.RawSpeed.SpeedZone speedZone = 101;
    public static final int SPEEDZONE_FIELD_NUMBER = 101;
    private com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed.SpeedZone speedZone_;
    /**
     * <code>required .eaglesakura_ace.RawSpeed.SpeedZone speedZone = 101;</code>
     *
     * <pre>
     * 速度ゾーン
     * </pre>
     */
    public boolean hasSpeedZone() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required .eaglesakura_ace.RawSpeed.SpeedZone speedZone = 101;</code>
     *
     * <pre>
     * 速度ゾーン
     * </pre>
     */
    public com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed.SpeedZone getSpeedZone() {
      return speedZone_;
    }

    private void initFields() {
      speedKmPerHour_ = 0F;
      wheelRpm_ = 0F;
      wheelRevolution_ = 0;
      speedZone_ = com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed.SpeedZone.Stop;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSpeedKmPerHour()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSpeedZone()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, speedKmPerHour_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, wheelRpm_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(101, speedZone_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(103, wheelRevolution_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, speedKmPerHour_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, wheelRpm_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(101, speedZone_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(103, wheelRevolution_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code eaglesakura_ace.RawSpeed}
     *
     * <pre>
     * スピード連携データ
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeedOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.eaglesakura.andriders.protocol.SensorProtocol.internal_static_eaglesakura_ace_RawSpeed_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.eaglesakura.andriders.protocol.SensorProtocol.internal_static_eaglesakura_ace_RawSpeed_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed.class, com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed.Builder.class);
      }

      // Construct using com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        speedKmPerHour_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        wheelRpm_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        wheelRevolution_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        speedZone_ = com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed.SpeedZone.Stop;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.eaglesakura.andriders.protocol.SensorProtocol.internal_static_eaglesakura_ace_RawSpeed_descriptor;
      }

      public com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed getDefaultInstanceForType() {
        return com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed.getDefaultInstance();
      }

      public com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed build() {
        com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed buildPartial() {
        com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed result = new com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.speedKmPerHour_ = speedKmPerHour_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.wheelRpm_ = wheelRpm_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.wheelRevolution_ = wheelRevolution_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.speedZone_ = speedZone_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed) {
          return mergeFrom((com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed other) {
        if (other == com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed.getDefaultInstance()) return this;
        if (other.hasSpeedKmPerHour()) {
          setSpeedKmPerHour(other.getSpeedKmPerHour());
        }
        if (other.hasWheelRpm()) {
          setWheelRpm(other.getWheelRpm());
        }
        if (other.hasWheelRevolution()) {
          setWheelRevolution(other.getWheelRevolution());
        }
        if (other.hasSpeedZone()) {
          setSpeedZone(other.getSpeedZone());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSpeedKmPerHour()) {
          
          return false;
        }
        if (!hasSpeedZone()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required float speedKmPerHour = 1;
      private float speedKmPerHour_ ;
      /**
       * <code>required float speedKmPerHour = 1;</code>
       *
       * <pre>
       * スピード km/h
       * </pre>
       */
      public boolean hasSpeedKmPerHour() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required float speedKmPerHour = 1;</code>
       *
       * <pre>
       * スピード km/h
       * </pre>
       */
      public float getSpeedKmPerHour() {
        return speedKmPerHour_;
      }
      /**
       * <code>required float speedKmPerHour = 1;</code>
       *
       * <pre>
       * スピード km/h
       * </pre>
       */
      public Builder setSpeedKmPerHour(float value) {
        bitField0_ |= 0x00000001;
        speedKmPerHour_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float speedKmPerHour = 1;</code>
       *
       * <pre>
       * スピード km/h
       * </pre>
       */
      public Builder clearSpeedKmPerHour() {
        bitField0_ = (bitField0_ & ~0x00000001);
        speedKmPerHour_ = 0F;
        onChanged();
        return this;
      }

      // optional float wheelRpm = 2;
      private float wheelRpm_ ;
      /**
       * <code>optional float wheelRpm = 2;</code>
       *
       * <pre>
       * ホイールの回転数
       * S&amp;Cセンサーを使用した場合は取得できるが、GPS由来は取得できないためoptional
       * </pre>
       */
      public boolean hasWheelRpm() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float wheelRpm = 2;</code>
       *
       * <pre>
       * ホイールの回転数
       * S&amp;Cセンサーを使用した場合は取得できるが、GPS由来は取得できないためoptional
       * </pre>
       */
      public float getWheelRpm() {
        return wheelRpm_;
      }
      /**
       * <code>optional float wheelRpm = 2;</code>
       *
       * <pre>
       * ホイールの回転数
       * S&amp;Cセンサーを使用した場合は取得できるが、GPS由来は取得できないためoptional
       * </pre>
       */
      public Builder setWheelRpm(float value) {
        bitField0_ |= 0x00000002;
        wheelRpm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float wheelRpm = 2;</code>
       *
       * <pre>
       * ホイールの回転数
       * S&amp;Cセンサーを使用した場合は取得できるが、GPS由来は取得できないためoptional
       * </pre>
       */
      public Builder clearWheelRpm() {
        bitField0_ = (bitField0_ & ~0x00000002);
        wheelRpm_ = 0F;
        onChanged();
        return this;
      }

      // optional int32 wheelRevolution = 103;
      private int wheelRevolution_ ;
      /**
       * <code>optional int32 wheelRevolution = 103;</code>
       *
       * <pre>
       * センサーへ接続してからの合計回転数（ホイール）
       * </pre>
       */
      public boolean hasWheelRevolution() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 wheelRevolution = 103;</code>
       *
       * <pre>
       * センサーへ接続してからの合計回転数（ホイール）
       * </pre>
       */
      public int getWheelRevolution() {
        return wheelRevolution_;
      }
      /**
       * <code>optional int32 wheelRevolution = 103;</code>
       *
       * <pre>
       * センサーへ接続してからの合計回転数（ホイール）
       * </pre>
       */
      public Builder setWheelRevolution(int value) {
        bitField0_ |= 0x00000004;
        wheelRevolution_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 wheelRevolution = 103;</code>
       *
       * <pre>
       * センサーへ接続してからの合計回転数（ホイール）
       * </pre>
       */
      public Builder clearWheelRevolution() {
        bitField0_ = (bitField0_ & ~0x00000004);
        wheelRevolution_ = 0;
        onChanged();
        return this;
      }

      // required .eaglesakura_ace.RawSpeed.SpeedZone speedZone = 101;
      private com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed.SpeedZone speedZone_ = com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed.SpeedZone.Stop;
      /**
       * <code>required .eaglesakura_ace.RawSpeed.SpeedZone speedZone = 101;</code>
       *
       * <pre>
       * 速度ゾーン
       * </pre>
       */
      public boolean hasSpeedZone() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required .eaglesakura_ace.RawSpeed.SpeedZone speedZone = 101;</code>
       *
       * <pre>
       * 速度ゾーン
       * </pre>
       */
      public com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed.SpeedZone getSpeedZone() {
        return speedZone_;
      }
      /**
       * <code>required .eaglesakura_ace.RawSpeed.SpeedZone speedZone = 101;</code>
       *
       * <pre>
       * 速度ゾーン
       * </pre>
       */
      public Builder setSpeedZone(com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed.SpeedZone value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        speedZone_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .eaglesakura_ace.RawSpeed.SpeedZone speedZone = 101;</code>
       *
       * <pre>
       * 速度ゾーン
       * </pre>
       */
      public Builder clearSpeedZone() {
        bitField0_ = (bitField0_ & ~0x00000008);
        speedZone_ = com.eaglesakura.andriders.protocol.SensorProtocol.RawSpeed.SpeedZone.Stop;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:eaglesakura_ace.RawSpeed)
    }

    static {
      defaultInstance = new RawSpeed(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:eaglesakura_ace.RawSpeed)
  }

  public interface SensorPayloadOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .eaglesakura_ace.SensorType type = 2;
    /**
     * <code>required .eaglesakura_ace.SensorType type = 2;</code>
     *
     * <pre>
     * センサーの種類
     * </pre>
     */
    boolean hasType();
    /**
     * <code>required .eaglesakura_ace.SensorType type = 2;</code>
     *
     * <pre>
     * センサーの種類
     * </pre>
     */
    com.eaglesakura.andriders.protocol.SensorProtocol.SensorType getType();

    // required bytes buffer = 10;
    /**
     * <code>required bytes buffer = 10;</code>
     *
     * <pre>
     * データ本体
     * 実際のデータは各種Rawデータに従う
     * </pre>
     */
    boolean hasBuffer();
    /**
     * <code>required bytes buffer = 10;</code>
     *
     * <pre>
     * データ本体
     * 実際のデータは各種Rawデータに従う
     * </pre>
     */
    com.google.protobuf.ByteString getBuffer();
  }
  /**
   * Protobuf type {@code eaglesakura_ace.SensorPayload}
   *
   * <pre>
   * センサー情報のペイロード
   * </pre>
   */
  public static final class SensorPayload extends
      com.google.protobuf.GeneratedMessage
      implements SensorPayloadOrBuilder {
    // Use SensorPayload.newBuilder() to construct.
    private SensorPayload(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SensorPayload(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SensorPayload defaultInstance;
    public static SensorPayload getDefaultInstance() {
      return defaultInstance;
    }

    public SensorPayload getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SensorPayload(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.eaglesakura.andriders.protocol.SensorProtocol.SensorType value = com.eaglesakura.andriders.protocol.SensorProtocol.SensorType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 82: {
              bitField0_ |= 0x00000002;
              buffer_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.eaglesakura.andriders.protocol.SensorProtocol.internal_static_eaglesakura_ace_SensorPayload_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.eaglesakura.andriders.protocol.SensorProtocol.internal_static_eaglesakura_ace_SensorPayload_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload.class, com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload.Builder.class);
    }

    public static com.google.protobuf.Parser<SensorPayload> PARSER =
        new com.google.protobuf.AbstractParser<SensorPayload>() {
      public SensorPayload parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SensorPayload(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SensorPayload> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .eaglesakura_ace.SensorType type = 2;
    public static final int TYPE_FIELD_NUMBER = 2;
    private com.eaglesakura.andriders.protocol.SensorProtocol.SensorType type_;
    /**
     * <code>required .eaglesakura_ace.SensorType type = 2;</code>
     *
     * <pre>
     * センサーの種類
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .eaglesakura_ace.SensorType type = 2;</code>
     *
     * <pre>
     * センサーの種類
     * </pre>
     */
    public com.eaglesakura.andriders.protocol.SensorProtocol.SensorType getType() {
      return type_;
    }

    // required bytes buffer = 10;
    public static final int BUFFER_FIELD_NUMBER = 10;
    private com.google.protobuf.ByteString buffer_;
    /**
     * <code>required bytes buffer = 10;</code>
     *
     * <pre>
     * データ本体
     * 実際のデータは各種Rawデータに従う
     * </pre>
     */
    public boolean hasBuffer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required bytes buffer = 10;</code>
     *
     * <pre>
     * データ本体
     * 実際のデータは各種Rawデータに従う
     * </pre>
     */
    public com.google.protobuf.ByteString getBuffer() {
      return buffer_;
    }

    private void initFields() {
      type_ = com.eaglesakura.andriders.protocol.SensorProtocol.SensorType.HeartrateMonitor;
      buffer_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBuffer()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(2, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(10, buffer_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(10, buffer_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code eaglesakura_ace.SensorPayload}
     *
     * <pre>
     * センサー情報のペイロード
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayloadOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.eaglesakura.andriders.protocol.SensorProtocol.internal_static_eaglesakura_ace_SensorPayload_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.eaglesakura.andriders.protocol.SensorProtocol.internal_static_eaglesakura_ace_SensorPayload_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload.class, com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload.Builder.class);
      }

      // Construct using com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = com.eaglesakura.andriders.protocol.SensorProtocol.SensorType.HeartrateMonitor;
        bitField0_ = (bitField0_ & ~0x00000001);
        buffer_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.eaglesakura.andriders.protocol.SensorProtocol.internal_static_eaglesakura_ace_SensorPayload_descriptor;
      }

      public com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload getDefaultInstanceForType() {
        return com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload.getDefaultInstance();
      }

      public com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload build() {
        com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload buildPartial() {
        com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload result = new com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.buffer_ = buffer_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload) {
          return mergeFrom((com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload other) {
        if (other == com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasBuffer()) {
          setBuffer(other.getBuffer());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        if (!hasBuffer()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.eaglesakura.andriders.protocol.SensorProtocol.SensorPayload) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .eaglesakura_ace.SensorType type = 2;
      private com.eaglesakura.andriders.protocol.SensorProtocol.SensorType type_ = com.eaglesakura.andriders.protocol.SensorProtocol.SensorType.HeartrateMonitor;
      /**
       * <code>required .eaglesakura_ace.SensorType type = 2;</code>
       *
       * <pre>
       * センサーの種類
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .eaglesakura_ace.SensorType type = 2;</code>
       *
       * <pre>
       * センサーの種類
       * </pre>
       */
      public com.eaglesakura.andriders.protocol.SensorProtocol.SensorType getType() {
        return type_;
      }
      /**
       * <code>required .eaglesakura_ace.SensorType type = 2;</code>
       *
       * <pre>
       * センサーの種類
       * </pre>
       */
      public Builder setType(com.eaglesakura.andriders.protocol.SensorProtocol.SensorType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .eaglesakura_ace.SensorType type = 2;</code>
       *
       * <pre>
       * センサーの種類
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = com.eaglesakura.andriders.protocol.SensorProtocol.SensorType.HeartrateMonitor;
        onChanged();
        return this;
      }

      // required bytes buffer = 10;
      private com.google.protobuf.ByteString buffer_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes buffer = 10;</code>
       *
       * <pre>
       * データ本体
       * 実際のデータは各種Rawデータに従う
       * </pre>
       */
      public boolean hasBuffer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required bytes buffer = 10;</code>
       *
       * <pre>
       * データ本体
       * 実際のデータは各種Rawデータに従う
       * </pre>
       */
      public com.google.protobuf.ByteString getBuffer() {
        return buffer_;
      }
      /**
       * <code>required bytes buffer = 10;</code>
       *
       * <pre>
       * データ本体
       * 実際のデータは各種Rawデータに従う
       * </pre>
       */
      public Builder setBuffer(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        buffer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes buffer = 10;</code>
       *
       * <pre>
       * データ本体
       * 実際のデータは各種Rawデータに従う
       * </pre>
       */
      public Builder clearBuffer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        buffer_ = getDefaultInstance().getBuffer();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:eaglesakura_ace.SensorPayload)
    }

    static {
      defaultInstance = new SensorPayload(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:eaglesakura_ace.SensorPayload)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_eaglesakura_ace_RawCadence_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_eaglesakura_ace_RawCadence_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_eaglesakura_ace_RawHeartrate_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_eaglesakura_ace_RawHeartrate_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_eaglesakura_ace_RawSpeed_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_eaglesakura_ace_RawSpeed_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_eaglesakura_ace_SensorPayload_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_eaglesakura_ace_SensorPayload_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\024SensorProtocol.proto\022\017eaglesakura_ace\032" +
      "\023AcesConstants.proto\"\236\001\n\nRawCadence\022\013\n\003r" +
      "pm\030d \002(\005\022<\n\013cadenceZone\030e \002(\0162\'.eaglesak" +
      "ura_ace.RawCadence.CadenceZone\022\027\n\017crankR" +
      "evolution\030f \002(\005\",\n\013CadenceZone\022\010\n\004Slow\020\000" +
      "\022\t\n\005Ideal\020\001\022\010\n\004High\020\002\"\334\001\n\014RawHeartrate\022\013" +
      "\n\003bpm\030d \002(\005\022B\n\rheartrateZone\030e \002(\0162+.eag" +
      "lesakura_ace.RawHeartrate.HeartrateZone\"" +
      "{\n\rHeartrateZone\022\n\n\006Repose\020\000\022\010\n\004Easy\020\001\022\021" +
      "\n\rFatCombustion\020\002\022\032\n\026PossessionOxygenMot",
      "ion\020\003\022\027\n\023NonOxygenatedMotion\020\004\022\014\n\010Overwo" +
      "rk\020\005\"\276\001\n\010RawSpeed\022\026\n\016speedKmPerHour\030\001 \002(" +
      "\002\022\020\n\010wheelRpm\030\002 \001(\002\022\027\n\017wheelRevolution\030g" +
      " \001(\005\0226\n\tspeedZone\030e \002(\0162#.eaglesakura_ac" +
      "e.RawSpeed.SpeedZone\"7\n\tSpeedZone\022\010\n\004Sto" +
      "p\020\000\022\010\n\004Slow\020\001\022\n\n\006Cruise\020\002\022\n\n\006Sprint\020\003\"J\n" +
      "\rSensorPayload\022)\n\004type\030\002 \002(\0162\033.eaglesaku" +
      "ra_ace.SensorType\022\016\n\006buffer\030\n \002(\014*F\n\nSen" +
      "sorType\022\024\n\020HeartrateMonitor\020\000\022\021\n\rCadence" +
      "Sensor\020\001\022\017\n\013SpeedSensor\020\002B$\n\"com.eaglesa",
      "kura.andriders.protocol"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_eaglesakura_ace_RawCadence_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_eaglesakura_ace_RawCadence_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_eaglesakura_ace_RawCadence_descriptor,
              new java.lang.String[] { "Rpm", "CadenceZone", "CrankRevolution", });
          internal_static_eaglesakura_ace_RawHeartrate_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_eaglesakura_ace_RawHeartrate_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_eaglesakura_ace_RawHeartrate_descriptor,
              new java.lang.String[] { "Bpm", "HeartrateZone", });
          internal_static_eaglesakura_ace_RawSpeed_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_eaglesakura_ace_RawSpeed_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_eaglesakura_ace_RawSpeed_descriptor,
              new java.lang.String[] { "SpeedKmPerHour", "WheelRpm", "WheelRevolution", "SpeedZone", });
          internal_static_eaglesakura_ace_SensorPayload_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_eaglesakura_ace_SensorPayload_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_eaglesakura_ace_SensorPayload_descriptor,
              new java.lang.String[] { "Type", "Buffer", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.eaglesakura.andriders.protocol.AcesConstants.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
