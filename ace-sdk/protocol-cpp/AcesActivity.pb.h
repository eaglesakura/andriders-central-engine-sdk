// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AcesActivity.proto

#ifndef PROTOBUF_AcesActivity_2eproto__INCLUDED
#define PROTOBUF_AcesActivity_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "AcesConstants.pb.h"
// @@protoc_insertion_point(includes)

namespace eaglesakura_ace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AcesActivity_2eproto();
void protobuf_AssignDesc_AcesActivity_2eproto();
void protobuf_ShutdownFile_AcesActivity_2eproto();

class MaxSpeedActivity;
class ActivityPayload;

enum MaxSpeedActivity_State {
  MaxSpeedActivity_State_Arrival = 1,
  MaxSpeedActivity_State_NewRecord = 2,
  MaxSpeedActivity_State_Finished = 3
};
bool MaxSpeedActivity_State_IsValid(int value);
const MaxSpeedActivity_State MaxSpeedActivity_State_State_MIN = MaxSpeedActivity_State_Arrival;
const MaxSpeedActivity_State MaxSpeedActivity_State_State_MAX = MaxSpeedActivity_State_Finished;
const int MaxSpeedActivity_State_State_ARRAYSIZE = MaxSpeedActivity_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* MaxSpeedActivity_State_descriptor();
inline const ::std::string& MaxSpeedActivity_State_Name(MaxSpeedActivity_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    MaxSpeedActivity_State_descriptor(), value);
}
inline bool MaxSpeedActivity_State_Parse(
    const ::std::string& name, MaxSpeedActivity_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MaxSpeedActivity_State>(
    MaxSpeedActivity_State_descriptor(), name, value);
}
enum ActivityType {
  MaxSpeedUpdate = 0
};
bool ActivityType_IsValid(int value);
const ActivityType ActivityType_MIN = MaxSpeedUpdate;
const ActivityType ActivityType_MAX = MaxSpeedUpdate;
const int ActivityType_ARRAYSIZE = ActivityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActivityType_descriptor();
inline const ::std::string& ActivityType_Name(ActivityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActivityType_descriptor(), value);
}
inline bool ActivityType_Parse(
    const ::std::string& name, ActivityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActivityType>(
    ActivityType_descriptor(), name, value);
}
// ===================================================================

class MaxSpeedActivity : public ::google::protobuf::Message {
 public:
  MaxSpeedActivity();
  virtual ~MaxSpeedActivity();

  MaxSpeedActivity(const MaxSpeedActivity& from);

  inline MaxSpeedActivity& operator=(const MaxSpeedActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaxSpeedActivity& default_instance();

  void Swap(MaxSpeedActivity* other);

  // implements Message ----------------------------------------------

  MaxSpeedActivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MaxSpeedActivity& from);
  void MergeFrom(const MaxSpeedActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MaxSpeedActivity_State State;
  static const State Arrival = MaxSpeedActivity_State_Arrival;
  static const State NewRecord = MaxSpeedActivity_State_NewRecord;
  static const State Finished = MaxSpeedActivity_State_Finished;
  static inline bool State_IsValid(int value) {
    return MaxSpeedActivity_State_IsValid(value);
  }
  static const State State_MIN =
    MaxSpeedActivity_State_State_MIN;
  static const State State_MAX =
    MaxSpeedActivity_State_State_MAX;
  static const int State_ARRAYSIZE =
    MaxSpeedActivity_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return MaxSpeedActivity_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return MaxSpeedActivity_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return MaxSpeedActivity_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required float newRecord = 1;
  inline bool has_newrecord() const;
  inline void clear_newrecord();
  static const int kNewRecordFieldNumber = 1;
  inline float newrecord() const;
  inline void set_newrecord(float value);

  // required string newRecordTime = 5;
  inline bool has_newrecordtime() const;
  inline void clear_newrecordtime();
  static const int kNewRecordTimeFieldNumber = 5;
  inline const ::std::string& newrecordtime() const;
  inline void set_newrecordtime(const ::std::string& value);
  inline void set_newrecordtime(const char* value);
  inline void set_newrecordtime(const char* value, size_t size);
  inline ::std::string* mutable_newrecordtime();
  inline ::std::string* release_newrecordtime();
  inline void set_allocated_newrecordtime(::std::string* newrecordtime);

  // required float oldRecord = 2;
  inline bool has_oldrecord() const;
  inline void clear_oldrecord();
  static const int kOldRecordFieldNumber = 2;
  inline float oldrecord() const;
  inline void set_oldrecord(float value);

  // optional int32 recordCadenceRpm = 3;
  inline bool has_recordcadencerpm() const;
  inline void clear_recordcadencerpm();
  static const int kRecordCadenceRpmFieldNumber = 3;
  inline ::google::protobuf::int32 recordcadencerpm() const;
  inline void set_recordcadencerpm(::google::protobuf::int32 value);

  // optional int32 recordHeartrateBpm = 4;
  inline bool has_recordheartratebpm() const;
  inline void clear_recordheartratebpm();
  static const int kRecordHeartrateBpmFieldNumber = 4;
  inline ::google::protobuf::int32 recordheartratebpm() const;
  inline void set_recordheartratebpm(::google::protobuf::int32 value);

  // required .eaglesakura_ace.MaxSpeedActivity.State state = 10;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 10;
  inline ::eaglesakura_ace::MaxSpeedActivity_State state() const;
  inline void set_state(::eaglesakura_ace::MaxSpeedActivity_State value);

  // @@protoc_insertion_point(class_scope:eaglesakura_ace.MaxSpeedActivity)
 private:
  inline void set_has_newrecord();
  inline void clear_has_newrecord();
  inline void set_has_newrecordtime();
  inline void clear_has_newrecordtime();
  inline void set_has_oldrecord();
  inline void clear_has_oldrecord();
  inline void set_has_recordcadencerpm();
  inline void clear_has_recordcadencerpm();
  inline void set_has_recordheartratebpm();
  inline void clear_has_recordheartratebpm();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* newrecordtime_;
  float newrecord_;
  float oldrecord_;
  ::google::protobuf::int32 recordcadencerpm_;
  ::google::protobuf::int32 recordheartratebpm_;
  int state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_AcesActivity_2eproto();
  friend void protobuf_AssignDesc_AcesActivity_2eproto();
  friend void protobuf_ShutdownFile_AcesActivity_2eproto();

  void InitAsDefaultInstance();
  static MaxSpeedActivity* default_instance_;
};
// -------------------------------------------------------------------

class ActivityPayload : public ::google::protobuf::Message {
 public:
  ActivityPayload();
  virtual ~ActivityPayload();

  ActivityPayload(const ActivityPayload& from);

  inline ActivityPayload& operator=(const ActivityPayload& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityPayload& default_instance();

  void Swap(ActivityPayload* other);

  // implements Message ----------------------------------------------

  ActivityPayload* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityPayload& from);
  void MergeFrom(const ActivityPayload& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .eaglesakura_ace.ActivityType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::eaglesakura_ace::ActivityType type() const;
  inline void set_type(::eaglesakura_ace::ActivityType value);

  // required bytes buffer = 10;
  inline bool has_buffer() const;
  inline void clear_buffer();
  static const int kBufferFieldNumber = 10;
  inline const ::std::string& buffer() const;
  inline void set_buffer(const ::std::string& value);
  inline void set_buffer(const char* value);
  inline void set_buffer(const void* value, size_t size);
  inline ::std::string* mutable_buffer();
  inline ::std::string* release_buffer();
  inline void set_allocated_buffer(::std::string* buffer);

  // @@protoc_insertion_point(class_scope:eaglesakura_ace.ActivityPayload)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_buffer();
  inline void clear_has_buffer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* buffer_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AcesActivity_2eproto();
  friend void protobuf_AssignDesc_AcesActivity_2eproto();
  friend void protobuf_ShutdownFile_AcesActivity_2eproto();

  void InitAsDefaultInstance();
  static ActivityPayload* default_instance_;
};
// ===================================================================


// ===================================================================

// MaxSpeedActivity

// required float newRecord = 1;
inline bool MaxSpeedActivity::has_newrecord() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaxSpeedActivity::set_has_newrecord() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaxSpeedActivity::clear_has_newrecord() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaxSpeedActivity::clear_newrecord() {
  newrecord_ = 0;
  clear_has_newrecord();
}
inline float MaxSpeedActivity::newrecord() const {
  return newrecord_;
}
inline void MaxSpeedActivity::set_newrecord(float value) {
  set_has_newrecord();
  newrecord_ = value;
}

// required string newRecordTime = 5;
inline bool MaxSpeedActivity::has_newrecordtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaxSpeedActivity::set_has_newrecordtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MaxSpeedActivity::clear_has_newrecordtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MaxSpeedActivity::clear_newrecordtime() {
  if (newrecordtime_ != &::google::protobuf::internal::kEmptyString) {
    newrecordtime_->clear();
  }
  clear_has_newrecordtime();
}
inline const ::std::string& MaxSpeedActivity::newrecordtime() const {
  return *newrecordtime_;
}
inline void MaxSpeedActivity::set_newrecordtime(const ::std::string& value) {
  set_has_newrecordtime();
  if (newrecordtime_ == &::google::protobuf::internal::kEmptyString) {
    newrecordtime_ = new ::std::string;
  }
  newrecordtime_->assign(value);
}
inline void MaxSpeedActivity::set_newrecordtime(const char* value) {
  set_has_newrecordtime();
  if (newrecordtime_ == &::google::protobuf::internal::kEmptyString) {
    newrecordtime_ = new ::std::string;
  }
  newrecordtime_->assign(value);
}
inline void MaxSpeedActivity::set_newrecordtime(const char* value, size_t size) {
  set_has_newrecordtime();
  if (newrecordtime_ == &::google::protobuf::internal::kEmptyString) {
    newrecordtime_ = new ::std::string;
  }
  newrecordtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MaxSpeedActivity::mutable_newrecordtime() {
  set_has_newrecordtime();
  if (newrecordtime_ == &::google::protobuf::internal::kEmptyString) {
    newrecordtime_ = new ::std::string;
  }
  return newrecordtime_;
}
inline ::std::string* MaxSpeedActivity::release_newrecordtime() {
  clear_has_newrecordtime();
  if (newrecordtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = newrecordtime_;
    newrecordtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MaxSpeedActivity::set_allocated_newrecordtime(::std::string* newrecordtime) {
  if (newrecordtime_ != &::google::protobuf::internal::kEmptyString) {
    delete newrecordtime_;
  }
  if (newrecordtime) {
    set_has_newrecordtime();
    newrecordtime_ = newrecordtime;
  } else {
    clear_has_newrecordtime();
    newrecordtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float oldRecord = 2;
inline bool MaxSpeedActivity::has_oldrecord() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MaxSpeedActivity::set_has_oldrecord() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MaxSpeedActivity::clear_has_oldrecord() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MaxSpeedActivity::clear_oldrecord() {
  oldrecord_ = 0;
  clear_has_oldrecord();
}
inline float MaxSpeedActivity::oldrecord() const {
  return oldrecord_;
}
inline void MaxSpeedActivity::set_oldrecord(float value) {
  set_has_oldrecord();
  oldrecord_ = value;
}

// optional int32 recordCadenceRpm = 3;
inline bool MaxSpeedActivity::has_recordcadencerpm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MaxSpeedActivity::set_has_recordcadencerpm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MaxSpeedActivity::clear_has_recordcadencerpm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MaxSpeedActivity::clear_recordcadencerpm() {
  recordcadencerpm_ = 0;
  clear_has_recordcadencerpm();
}
inline ::google::protobuf::int32 MaxSpeedActivity::recordcadencerpm() const {
  return recordcadencerpm_;
}
inline void MaxSpeedActivity::set_recordcadencerpm(::google::protobuf::int32 value) {
  set_has_recordcadencerpm();
  recordcadencerpm_ = value;
}

// optional int32 recordHeartrateBpm = 4;
inline bool MaxSpeedActivity::has_recordheartratebpm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MaxSpeedActivity::set_has_recordheartratebpm() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MaxSpeedActivity::clear_has_recordheartratebpm() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MaxSpeedActivity::clear_recordheartratebpm() {
  recordheartratebpm_ = 0;
  clear_has_recordheartratebpm();
}
inline ::google::protobuf::int32 MaxSpeedActivity::recordheartratebpm() const {
  return recordheartratebpm_;
}
inline void MaxSpeedActivity::set_recordheartratebpm(::google::protobuf::int32 value) {
  set_has_recordheartratebpm();
  recordheartratebpm_ = value;
}

// required .eaglesakura_ace.MaxSpeedActivity.State state = 10;
inline bool MaxSpeedActivity::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MaxSpeedActivity::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MaxSpeedActivity::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MaxSpeedActivity::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::eaglesakura_ace::MaxSpeedActivity_State MaxSpeedActivity::state() const {
  return static_cast< ::eaglesakura_ace::MaxSpeedActivity_State >(state_);
}
inline void MaxSpeedActivity::set_state(::eaglesakura_ace::MaxSpeedActivity_State value) {
  assert(::eaglesakura_ace::MaxSpeedActivity_State_IsValid(value));
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// ActivityPayload

// required .eaglesakura_ace.ActivityType type = 1;
inline bool ActivityPayload::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityPayload::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityPayload::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityPayload::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::eaglesakura_ace::ActivityType ActivityPayload::type() const {
  return static_cast< ::eaglesakura_ace::ActivityType >(type_);
}
inline void ActivityPayload::set_type(::eaglesakura_ace::ActivityType value) {
  assert(::eaglesakura_ace::ActivityType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required bytes buffer = 10;
inline bool ActivityPayload::has_buffer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityPayload::set_has_buffer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityPayload::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityPayload::clear_buffer() {
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    buffer_->clear();
  }
  clear_has_buffer();
}
inline const ::std::string& ActivityPayload::buffer() const {
  return *buffer_;
}
inline void ActivityPayload::set_buffer(const ::std::string& value) {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  buffer_->assign(value);
}
inline void ActivityPayload::set_buffer(const char* value) {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  buffer_->assign(value);
}
inline void ActivityPayload::set_buffer(const void* value, size_t size) {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  buffer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityPayload::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  return buffer_;
}
inline ::std::string* ActivityPayload::release_buffer() {
  clear_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = buffer_;
    buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivityPayload::set_allocated_buffer(::std::string* buffer) {
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    delete buffer_;
  }
  if (buffer) {
    set_has_buffer();
    buffer_ = buffer;
  } else {
    clear_has_buffer();
    buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace eaglesakura_ace

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eaglesakura_ace::MaxSpeedActivity_State>() {
  return ::eaglesakura_ace::MaxSpeedActivity_State_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eaglesakura_ace::ActivityType>() {
  return ::eaglesakura_ace::ActivityType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AcesActivity_2eproto__INCLUDED
