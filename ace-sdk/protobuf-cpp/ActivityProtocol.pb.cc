// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActivityProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ActivityProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace eaglesakura_ace {

namespace {

const ::google::protobuf::Descriptor* MaxSpeedActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaxSpeedActivity_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MaxSpeedActivity_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ActivityPayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityPayload_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ActivityType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ActivityProtocol_2eproto() {
  protobuf_AddDesc_ActivityProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ActivityProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  MaxSpeedActivity_descriptor_ = file->message_type(0);
  static const int MaxSpeedActivity_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxSpeedActivity, newrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxSpeedActivity, newrecordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxSpeedActivity, oldrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxSpeedActivity, recordcadencerpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxSpeedActivity, recordheartratebpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxSpeedActivity, state_),
  };
  MaxSpeedActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaxSpeedActivity_descriptor_,
      MaxSpeedActivity::default_instance_,
      MaxSpeedActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxSpeedActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxSpeedActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaxSpeedActivity));
  MaxSpeedActivity_State_descriptor_ = MaxSpeedActivity_descriptor_->enum_type(0);
  ActivityPayload_descriptor_ = file->message_type(1);
  static const int ActivityPayload_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPayload, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPayload, buffer_),
  };
  ActivityPayload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityPayload_descriptor_,
      ActivityPayload::default_instance_,
      ActivityPayload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPayload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPayload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityPayload));
  ActivityType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ActivityProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaxSpeedActivity_descriptor_, &MaxSpeedActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityPayload_descriptor_, &ActivityPayload::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ActivityProtocol_2eproto() {
  delete MaxSpeedActivity::default_instance_;
  delete MaxSpeedActivity_reflection_;
  delete ActivityPayload::default_instance_;
  delete ActivityPayload_reflection_;
}

void protobuf_AddDesc_ActivityProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::eaglesakura_ace::protobuf_AddDesc_AcesConstants_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ActivityProtocol.proto\022\017eaglesakura_ac"
    "e\032\023AcesConstants.proto\"\360\001\n\020MaxSpeedActiv"
    "ity\022\021\n\tnewRecord\030\001 \002(\002\022\025\n\rnewRecordTime\030"
    "\005 \002(\t\022\021\n\toldRecord\030\002 \002(\002\022\030\n\020recordCadenc"
    "eRpm\030\003 \001(\005\022\032\n\022recordHeartrateBpm\030\004 \001(\005\0226"
    "\n\005state\030\n \002(\0162\'.eaglesakura_ace.MaxSpeed"
    "Activity.State\"1\n\005State\022\013\n\007Arrival\020\001\022\r\n\t"
    "NewRecord\020\002\022\014\n\010Finished\020\003\"N\n\017ActivityPay"
    "load\022+\n\004type\030\001 \002(\0162\035.eaglesakura_ace.Act"
    "ivityType\022\016\n\006buffer\030\n \002(\014*\"\n\014ActivityTyp"
    "e\022\022\n\016MaxSpeedUpdate\020\000B$\n\"com.eaglesakura"
    ".andriders.protocol", 459);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ActivityProtocol.proto", &protobuf_RegisterTypes);
  MaxSpeedActivity::default_instance_ = new MaxSpeedActivity();
  ActivityPayload::default_instance_ = new ActivityPayload();
  MaxSpeedActivity::default_instance_->InitAsDefaultInstance();
  ActivityPayload::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ActivityProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ActivityProtocol_2eproto {
  StaticDescriptorInitializer_ActivityProtocol_2eproto() {
    protobuf_AddDesc_ActivityProtocol_2eproto();
  }
} static_descriptor_initializer_ActivityProtocol_2eproto_;
const ::google::protobuf::EnumDescriptor* ActivityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityType_descriptor_;
}
bool ActivityType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MaxSpeedActivity_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaxSpeedActivity_State_descriptor_;
}
bool MaxSpeedActivity_State_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MaxSpeedActivity_State MaxSpeedActivity::Arrival;
const MaxSpeedActivity_State MaxSpeedActivity::NewRecord;
const MaxSpeedActivity_State MaxSpeedActivity::Finished;
const MaxSpeedActivity_State MaxSpeedActivity::State_MIN;
const MaxSpeedActivity_State MaxSpeedActivity::State_MAX;
const int MaxSpeedActivity::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MaxSpeedActivity::kNewRecordFieldNumber;
const int MaxSpeedActivity::kNewRecordTimeFieldNumber;
const int MaxSpeedActivity::kOldRecordFieldNumber;
const int MaxSpeedActivity::kRecordCadenceRpmFieldNumber;
const int MaxSpeedActivity::kRecordHeartrateBpmFieldNumber;
const int MaxSpeedActivity::kStateFieldNumber;
#endif  // !_MSC_VER

MaxSpeedActivity::MaxSpeedActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MaxSpeedActivity::InitAsDefaultInstance() {
}

MaxSpeedActivity::MaxSpeedActivity(const MaxSpeedActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MaxSpeedActivity::SharedCtor() {
  _cached_size_ = 0;
  newrecord_ = 0;
  newrecordtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oldrecord_ = 0;
  recordcadencerpm_ = 0;
  recordheartratebpm_ = 0;
  state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaxSpeedActivity::~MaxSpeedActivity() {
  SharedDtor();
}

void MaxSpeedActivity::SharedDtor() {
  if (newrecordtime_ != &::google::protobuf::internal::kEmptyString) {
    delete newrecordtime_;
  }
  if (this != default_instance_) {
  }
}

void MaxSpeedActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaxSpeedActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaxSpeedActivity_descriptor_;
}

const MaxSpeedActivity& MaxSpeedActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityProtocol_2eproto();
  return *default_instance_;
}

MaxSpeedActivity* MaxSpeedActivity::default_instance_ = NULL;

MaxSpeedActivity* MaxSpeedActivity::New() const {
  return new MaxSpeedActivity;
}

void MaxSpeedActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newrecord_ = 0;
    if (has_newrecordtime()) {
      if (newrecordtime_ != &::google::protobuf::internal::kEmptyString) {
        newrecordtime_->clear();
      }
    }
    oldrecord_ = 0;
    recordcadencerpm_ = 0;
    recordheartratebpm_ = 0;
    state_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaxSpeedActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float newRecord = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &newrecord_)));
          set_has_newrecord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_oldRecord;
        break;
      }

      // required float oldRecord = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_oldRecord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &oldrecord_)));
          set_has_oldrecord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recordCadenceRpm;
        break;
      }

      // optional int32 recordCadenceRpm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recordCadenceRpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recordcadencerpm_)));
          set_has_recordcadencerpm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_recordHeartrateBpm;
        break;
      }

      // optional int32 recordHeartrateBpm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recordHeartrateBpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recordheartratebpm_)));
          set_has_recordheartratebpm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_newRecordTime;
        break;
      }

      // required string newRecordTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newRecordTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newrecordtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newrecordtime().data(), this->newrecordtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_state;
        break;
      }

      // required .eaglesakura_ace.MaxSpeedActivity.State state = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eaglesakura_ace::MaxSpeedActivity_State_IsValid(value)) {
            set_state(static_cast< ::eaglesakura_ace::MaxSpeedActivity_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MaxSpeedActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float newRecord = 1;
  if (has_newrecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->newrecord(), output);
  }

  // required float oldRecord = 2;
  if (has_oldrecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->oldrecord(), output);
  }

  // optional int32 recordCadenceRpm = 3;
  if (has_recordcadencerpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->recordcadencerpm(), output);
  }

  // optional int32 recordHeartrateBpm = 4;
  if (has_recordheartratebpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->recordheartratebpm(), output);
  }

  // required string newRecordTime = 5;
  if (has_newrecordtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newrecordtime().data(), this->newrecordtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->newrecordtime(), output);
  }

  // required .eaglesakura_ace.MaxSpeedActivity.State state = 10;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MaxSpeedActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float newRecord = 1;
  if (has_newrecord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->newrecord(), target);
  }

  // required float oldRecord = 2;
  if (has_oldrecord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->oldrecord(), target);
  }

  // optional int32 recordCadenceRpm = 3;
  if (has_recordcadencerpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->recordcadencerpm(), target);
  }

  // optional int32 recordHeartrateBpm = 4;
  if (has_recordheartratebpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->recordheartratebpm(), target);
  }

  // required string newRecordTime = 5;
  if (has_newrecordtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newrecordtime().data(), this->newrecordtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->newrecordtime(), target);
  }

  // required .eaglesakura_ace.MaxSpeedActivity.State state = 10;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MaxSpeedActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float newRecord = 1;
    if (has_newrecord()) {
      total_size += 1 + 4;
    }

    // required string newRecordTime = 5;
    if (has_newrecordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newrecordtime());
    }

    // required float oldRecord = 2;
    if (has_oldrecord()) {
      total_size += 1 + 4;
    }

    // optional int32 recordCadenceRpm = 3;
    if (has_recordcadencerpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recordcadencerpm());
    }

    // optional int32 recordHeartrateBpm = 4;
    if (has_recordheartratebpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recordheartratebpm());
    }

    // required .eaglesakura_ace.MaxSpeedActivity.State state = 10;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaxSpeedActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaxSpeedActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaxSpeedActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaxSpeedActivity::MergeFrom(const MaxSpeedActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newrecord()) {
      set_newrecord(from.newrecord());
    }
    if (from.has_newrecordtime()) {
      set_newrecordtime(from.newrecordtime());
    }
    if (from.has_oldrecord()) {
      set_oldrecord(from.oldrecord());
    }
    if (from.has_recordcadencerpm()) {
      set_recordcadencerpm(from.recordcadencerpm());
    }
    if (from.has_recordheartratebpm()) {
      set_recordheartratebpm(from.recordheartratebpm());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaxSpeedActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaxSpeedActivity::CopyFrom(const MaxSpeedActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxSpeedActivity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;

  return true;
}

void MaxSpeedActivity::Swap(MaxSpeedActivity* other) {
  if (other != this) {
    std::swap(newrecord_, other->newrecord_);
    std::swap(newrecordtime_, other->newrecordtime_);
    std::swap(oldrecord_, other->oldrecord_);
    std::swap(recordcadencerpm_, other->recordcadencerpm_);
    std::swap(recordheartratebpm_, other->recordheartratebpm_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaxSpeedActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaxSpeedActivity_descriptor_;
  metadata.reflection = MaxSpeedActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityPayload::kTypeFieldNumber;
const int ActivityPayload::kBufferFieldNumber;
#endif  // !_MSC_VER

ActivityPayload::ActivityPayload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityPayload::InitAsDefaultInstance() {
}

ActivityPayload::ActivityPayload(const ActivityPayload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityPayload::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityPayload::~ActivityPayload() {
  SharedDtor();
}

void ActivityPayload::SharedDtor() {
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    delete buffer_;
  }
  if (this != default_instance_) {
  }
}

void ActivityPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityPayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityPayload_descriptor_;
}

const ActivityPayload& ActivityPayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityProtocol_2eproto();
  return *default_instance_;
}

ActivityPayload* ActivityPayload::default_instance_ = NULL;

ActivityPayload* ActivityPayload::New() const {
  return new ActivityPayload;
}

void ActivityPayload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_buffer()) {
      if (buffer_ != &::google::protobuf::internal::kEmptyString) {
        buffer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .eaglesakura_ace.ActivityType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eaglesakura_ace::ActivityType_IsValid(value)) {
            set_type(static_cast< ::eaglesakura_ace::ActivityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_buffer;
        break;
      }

      // required bytes buffer = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .eaglesakura_ace.ActivityType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required bytes buffer = 10;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->buffer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityPayload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .eaglesakura_ace.ActivityType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required bytes buffer = 10;
  if (has_buffer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->buffer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityPayload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .eaglesakura_ace.ActivityType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required bytes buffer = 10;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityPayload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityPayload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityPayload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityPayload::MergeFrom(const ActivityPayload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_buffer()) {
      set_buffer(from.buffer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityPayload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityPayload::CopyFrom(const ActivityPayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityPayload::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActivityPayload::Swap(ActivityPayload* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(buffer_, other->buffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityPayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityPayload_descriptor_;
  metadata.reflection = ActivityPayload_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace eaglesakura_ace

// @@protoc_insertion_point(global_scope)
