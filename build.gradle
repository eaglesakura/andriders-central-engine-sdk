// 0.4.2 : 獲得標高と傾斜に対応
// 0.4.3 : javadoc整理
// 0.4.4 : 常駐Serviceに対応
// 0.4.5 : RemoteCentralに対応 / センサーの受信時刻に対応 / 位置情報の信頼性についての情報を追加（トンネル対策）
// 0.4.6 : EGLIB module update
// 3.0.0 : ACE v3系列対応
def ACES_SDK_VERSION = "3.0.0.dev";
def EGLIBRARY_ARTIFACT_VERSION = "0.2.9";
def PROTOBUF_ARTIFACT_VERSION = "2.6.0";


buildscript {
    repositories {
        maven { url "http://eaglesakura.github.io/maven/" }
        mavenCentral()
//        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.+'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
        classpath "com.eaglesakura:eglibrary-gradle-plugin:0.2.8"
    }
}

allprojects {
    repositories {
        maven { url "http://eaglesakura.github.io/maven/" }
        mavenCentral()
    }
}

apply plugin: 'com.android.library'

dependencies {
    compile "com.google.protobuf:protobuf-java:${PROTOBUF_ARTIFACT_VERSION}"
    compile 'com.android.support:support-annotations:+'

//    // release only
//    releaseCompile "com.eaglesakura:eglibrary-android-java-core:${EGLIBRARY_ARTIFACT_VERSION}"

    // debug only
    compile project(':app:eglibrary-subset')
}

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 22

        // SDK VERSION
        buildConfigField "String", "ACE_SDK_VERSION", "\"${ACES_SDK_VERSION}\""
        buildConfigField "int", "ACE_PROTOCOL_VERSION", "1";
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src/main/generated/protobuf', 'src/main/generated/idl',
                            'src/main/java']
        }
    }
}

/**
 * Protocol Buffersファイルをビルドする
 */
task compileProtobuf(type: com.eaglesakura.gradle.tasks.ProtobufCompileTask) {
    src = file("src/main/protobuf")
    javaOutput = file("src/main/generated/protobuf")
}

/**
 * ACEと拡張アプリが内部で通信する内容を管理する
 */
task generateIdl(type: com.eaglesakura.gradle.tasks.AndroidPropsGenTask) {
    outDirectory file('src/main/generated/idl')
    superClass = "com.eaglesakura.android.db.BaseProperties";

    /**
     * GPS情報
     */
    def IdlLocation = newProps("com.eaglesakura.andriders.idl.remote.IdlLocation");
    IdlLocation.doubleProperty "latitude", 0
    IdlLocation.doubleProperty "longitude", 0
    IdlLocation.doubleProperty "altitude", 0 // 高度
    IdlLocation.doubleProperty "accuracyMeter", 50 // 精度（メートル単位）

    /**
     * 心拍情報
     */
    def IdlHeartrate = newProps("com.eaglesakura.andriders.idl.remote.IdlHeartrate");
    IdlHeartrate.intProperty "bpm", 0

    /**
     * S&Cセンサー
     */
    def IdlSpeedAndCadence = newProps("com.eaglesakura.andriders.idl.remote.IdlSpeedAndCadence");
    IdlSpeedAndCadence.floatProperty "crankRpm", -1
    IdlSpeedAndCadence.intProperty "crankRevolution", -1
    IdlSpeedAndCadence.floatProperty "wheelRpm", -1
    IdlSpeedAndCadence.intProperty "wheelRevolution", -1

    /**
     * 文字列のプロパティ
     */
    def IdlStringProperty = newProps("com.eaglesakura.andriders.idl.remote.IdlStringProperty");
    IdlStringProperty.stringProperty "value", ""

    /**
     * 拡張機能情報
     */
    def IdlExtensionInfo = newProps("com.eaglesakura.andriders.idl.remote.IdlExtensionInfo");
    IdlExtensionInfo.stringProperty "id", "" // 一意に識別するためのID
    IdlExtensionInfo.stringProperty "text", "" // ヘルプテキスト
    IdlExtensionInfo.stringProperty "category", "others" // 識別用のカテゴリ。ON/OFFの排他や重複を設定する
    IdlExtensionInfo.booleanProperty "hasSetting", false // 設定画面を持つならばtrue

    /**
     * サイコンのディスプレイ情報を設定する
     */
    def IdlCycleDisplayInfo = newProps("com.eaglesakura.andriders.idl.display.IdlCycleDisplayInfo");
    IdlCycleDisplayInfo.stringProperty "id", "" // 一意に識別するためのID
    IdlCycleDisplayInfo.stringProperty "title", ""
    IdlCycleDisplayInfo.stringProperty "text", ""
    IdlCycleDisplayInfo.booleanProperty "hasSetting", false // 設定画面を持つならばtrue

    /**
     * サイコンに表示するディスプレイ情報を通知する
     */
    def IdlCycleDisplayValue = newProps("com.eaglesakura.andriders.idl.display.IdlCycleDisplayValue");
    IdlCycleDisplayValue.stringProperty "id", "" // 一意に識別するためのID
    IdlCycleDisplayValue.stringProperty "type", "" // 表示タイプ
    IdlCycleDisplayValue.stringProperty "values", ""
    // 表示内容を示したJSON。表示内容は非常に小さいので、JSONレベルの大きさでも問題ないはず。
}

task uploadSdkArchives << {
    tasks.uploadArchives.execute();
}

apply plugin: 'maven'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

android.libraryVariants.all { variant ->
    if (!"release".equals(variant.name)) {
        return;
    }

    task("javadoc", type: Javadoc) {
        title = "Andriders Central Engine SDK / ver ${ACES_SDK_VERSION}"
        description "Generates Android Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar) + files("build/intermediates/classes/${variant.name}/")
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/*Dao.java' /* ignore greenDAO */
        exclude '**/DaoMaster.java' /* ignore greenDAO */
        exclude '**/DaoSession.java' /* ignore greenDAO */
        exclude '**/R.java' /* ignore greenDAO */
    }


    task("javadocJar", type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri(new File("${System.env.MAVEN_LOCAL_REPO}")))
            pom.version = ACES_SDK_VERSION
            pom.groupId = "com.eaglesakura"
            pom.artifactId = "andriders-central-engine-sdk"
        }
    }
}

task uploadJavadoc << {
    def src = file("build/docs/javadoc/");
    def dst = file("${System.env.MAVEN_LOCAL_REPO}/doc/andriders-central-engine-sdk/")
    dst.deleteDir();
    dst.mkdirs();

    ["/usr/bin/rsync", "-a", src.absolutePath, dst.absolutePath].execute().text;
}

[uploadArchives.repositories.mavenDeployer]*.pom*.whenConfigured { pom ->
    pom.project {
        inceptionYear '2015'
        packaging 'aar'
        licenses {
            license {
                name 'NYSL'
                url 'https://raw.github.com/eaglesakura/eglibrary/master/LICENSE'
            }
        }

        dependencies {
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'eglibrary-android-java-core'
                version = EGLIBRARY_ARTIFACT_VERSION
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'eglibrary-java-geo'
                version = EGLIBRARY_ARTIFACT_VERSION
                scope = 'compile'
            }
            dependency {
                groupId = 'com.google.protobuf'
                artifactId = 'protobuf-java'
                version = PROTOBUF_ARTIFACT_VERSION
                scope = 'compile'
            }
        }
    }
}

