// 3.0.x : ACE v3系列対応 / Circle CI対応
def ACES_SDK_VERSION = "3.0";
def ARTIFACT_NAME = file(".").absoluteFile.name
def ARTIFACT_TYPE = "";   // アーティファクトの切り分けを明示的に行なう, ""空文字, "beta"等
def ARTIFACT_INSTALL_TARGET = getArtifactInstallTarget()

buildscript {
    repositories {
        maven { url "http://eaglesakura.github.io/maven/" }
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.0'
        classpath "com.eaglesakura:plugin-ci-support:1.0.47"
        classpath 'me.tatarka:gradle-retrolambda:3.2.5' // support Lambda
    }
}

allprojects {
    repositories {
        maven { url "http://eaglesakura.github.io/maven/" }
        jcenter()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda' /* Android Lambda Support */
apply plugin: 'com.eaglesakura.ci-support'

// check env
if (!hasProperty("EGLIBRARY_COMPILE_LOCAL")) {
    ext.EGLIBRARY_COMPILE_LOCAL = false // 開発用。ローカルのソースコードをビルドする
}
if (!hasProperty("ANDROID_SUPPORT_LIB_VERSION")) {
    ext.ANDROID_SUPPORT_LIB_VERSION = "25.+"
}

dependencies {
    if (EGLIBRARY_COMPILE_LOCAL) {
        // 開発用:ローカルのソースコードを利用する
        compile project(':eglibrary:simple-utils')
        compile project(':eglibrary:simple-serialize')
        compile project(':eglibrary:geo-utils')
        compile project(':eglibrary:android-simple-utils')
        compile project(':eglibrary:android-canvas-graphics')
        compile project(':eglibrary:android-command-service')

        testCompile project(":eglibrary:json-wrapper")
        testCompile project(":eglibrary:android-unittest-support")
    } else {
        // mavenから必要なライブラリを取得する
        compile 'com.eaglesakura:simple-logger:+'               /* Log */
        compile 'com.eaglesakura:simple-utils:+'                /* Utils */
        compile 'com.eaglesakura:simple-serialize:+'            /* IDLシリアライズ */
        compile 'com.eaglesakura:geo-utils:+'                   /* GPS計算 */
        compile 'com.eaglesakura:android-simple-utils:+'        /* Utils */
        compile 'com.eaglesakura:android-canvas-graphics:+'     /* アイコン圧縮 */
        compile 'com.eaglesakura:android-command-service:+'     /* ACE本体とのデータ通信 */

        testCompile 'com.eaglesakura:json-wrapper:1.+'
        testCompile 'com.eaglesakura:android-unittest-support:1.+'
    }
    compile "com.android.support:support-annotations:${ANDROID_SUPPORT_LIB_VERSION}"
}

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25

        // SDK VERSION
        buildConfigField "String", "ACE_SDK_VERSION", "\"${ACES_SDK_VERSION}${getArtifactVersionSuffix(ARTIFACT_TYPE)}\""
        buildConfigField "String", "ACE_APPLICATION_ID", "\"org.andriders.ace\""
        buildConfigField "int", "ACE_PROTOCOL_VERSION", "2"
        buildConfigField "int", "ACE_SDK_BUILD_NUMBER", "${eglibrary.ci.buildVersionCode}"

        manifestPlaceholders = [ace_sdk_version: "${ACES_SDK_VERSION}${getArtifactVersionSuffix(ARTIFACT_TYPE)}"]
    }

    lintOptions {
        disable "DuplicateIds"  // LayoutXmlのID重複は許容する

        // 全てのロケールに対する翻訳は非現実的なので無視する
        disable "MissingTranslation"
        disable "DefaultLocale"

//        disable "NewApi"
//        disable "InvalidPackage"
//        disable "ResourceType"
//        disable "UnusedResources"
    }

}

/**
 * UnitTest & retro lambda
 */
tasks.withType(Test) {
    project.tasks
            .findAll {
        task -> (task.name ==~ /compile.*?TestJava.*?/)
    }
    .each { task ->
        task.doFirst {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }
    }
}

apply plugin: 'maven'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

android.libraryVariants.all { variant ->
    if (!"release".equals(variant.name)) {
        return;
    }

    task("javadoc", type: Javadoc) {
        title = "Andriders Central Engine SDK / ver ${ACES_SDK_VERSION}${getArtifactVersionSuffix(ARTIFACT_TYPE)}"
        description "Generates Android Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar) + files("build/intermediates/classes/${variant.name}/")
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/*Dao.java' /* ignore greenDAO */
        exclude '**/DaoMaster.java' /* ignore greenDAO */
        exclude '**/DaoSession.java' /* ignore greenDAO */
        exclude '**/R.java' /* ignore greenDAO */

        options.addStringOption('Xdoclint:none', '-quiet')
        options.encoding = "UTF-8"
        project.configure(options) {
            memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
            charSet = "UTF-8"
        }
    }


    task("javadocJar", type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri(ARTIFACT_INSTALL_TARGET))
            pom.version = ACES_SDK_VERSION + getArtifactVersionSuffix(ARTIFACT_TYPE)
            pom.groupId = "com.eaglesakura"
            pom.artifactId = ARTIFACT_NAME
        }
    }
}

task uploadJavadoc << {
    def src = file("build/docs/javadoc/");
    def dst = new File("${ARTIFACT_INSTALL_TARGET.absolutePath}/doc/${ARTIFACT_NAME}/");
    dst.deleteDir();
    dst.mkdirs();

    ["/usr/bin/rsync", "-a", src.absolutePath, dst.absolutePath].execute().text;
}

/**
 * 依存している固定ライブラリバージョンを取得する
 */
String dependenciesVersion(String libName, String defVersion) {
    def lines = [];
    def target = file("dependencies.txt");
    if (!target.file) {
        return defVersion;
    }

    target.text.eachLine {
        if (!it.contains(libName) || it.contains("(")) {
            return;
        }

        def tokens = it.split(" ");
        if (tokens == null || tokens.length == 0) {
            return;
        }

        lines += tokens[tokens.length - 1];
    }
    if (lines.empty) {
        println("${libName} -> ${defVersion}")
        return defVersion;
    } else {
        println("${libName} -> ${lines[0]}")
        return lines[0];
    }
}

[uploadArchives.repositories.mavenDeployer]*.pom*.whenConfigured { pom ->
    pom.project {
        inceptionYear '2015'
        packaging 'aar'
        licenses {
            license {
                name 'NYSL'
                url 'https://raw.github.com/eaglesakura/eglibrary/master/LICENSE'
            }
        }

        dependencies {
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'simple-logger'
                version = dependenciesVersion("com.eaglesakura:simple-logger", "1.+")
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'simple-utils'
                version = dependenciesVersion("com.eaglesakura:simple-utils", "1.+")
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'simple-serialize'
                version = dependenciesVersion("com.eaglesakura:simple-serialize", "1.+")
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'geo-utils'
                version = dependenciesVersion("com.eaglesakura:geo-utils", "1.+")
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'android-simple-utils'
                version = dependenciesVersion("com.eaglesakura:android-simple-utils", "1.+")
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'android-canvas-graphics'
                version = dependenciesVersion("com.eaglesakura:android-canvas-graphics", "1.+")
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'android-command-service'
                version = dependenciesVersion("com.eaglesakura:android-command-service", "1.+")
                scope = 'compile'
            }
        }
    }
}

/**
 * バージョンを取得する
 * CircleCIの場合、バージョン末尾にビルド番号を付与する
 */
def getArtifactVersionSuffix(String artifactType) {
    def prefix = ".";
    if ("" != artifactType) {
        // 明示的に`beta`等のタイプが指定されているなら、それを付与する
        prefix = ".${artifactType}-"
    }
    if (System.env.CIRCLE_BUILD_NUM != null) {
        // CircleCIのバージョンが指定されているので、そちらを利用する
        return "${prefix}${System.env.CIRCLE_BUILD_NUM}"
    } else {
        return "${prefix}local"
    }
}

/**
 * Mavenの格納先を確定する
 */
def getArtifactInstallTarget() {
    if (file("maven").directory) {
        return file("maven");
    } else if (System.env.CIRCLE_ARTIFACTS != null) {
        return file(System.env.CIRCLE_ARTIFACTS);
    } else if (System.env.MAVEN_LOCAL_REPO != null) {
        return file(System.env.MAVEN_LOCAL_REPO);
    } else {
        return file("ci-release");
    }
}
