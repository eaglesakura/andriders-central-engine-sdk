// 3.0.x : ACE v3系列対応 / Circle CI対応
def ACES_SDK_VERSION = "3.0";
def ARTIFACT_TYPE = "beta";   // アーティファクトの切り分けを明示的に行なう, ""空文字, "beta"等
def REPOSITORY_NAME = "maven"
def BINTRAY_LICENSES = ["MIT"]
def BINTRAY_LABELS = ["android"]
def BINTRAY_API_KEY = System.env.BINTRAY_API_KEY
def BINTRAY_GPG_PASS = System.env.BINTRAY_GPG_PASS

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://dl.bintray.com/eaglesakura/maven/" }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.2'
        classpath 'me.tatarka:gradle-retrolambda:3.5.0' // support Lambda
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    }
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://dl.bintray.com/eaglesakura/maven/" }
    }
}

apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda' /* Android Lambda Support */
group = "com.eaglesakura"
version = "${ACES_SDK_VERSION}${getArtifactVersionSuffix(ARTIFACT_TYPE)}"

// check env
if (!hasProperty("EGLIBRARY_COMPILE_LOCAL")) {
    ext.EGLIBRARY_COMPILE_LOCAL = false // 開発用。ローカルのソースコードをビルドする
}
dependencies {
    if (EGLIBRARY_COMPILE_LOCAL) {
        // 開発用:ローカルのソースコードを利用する
        compile project(':eglibrary:simple-logger')
        compile project(':eglibrary:java-commons')
        compile project(':eglibrary:publd-serializer')
        compile project(':eglibrary:geo-utils')
        compile project(':eglibrary:android-commons')
        compile project(':eglibrary:android-command-service')

        testCompile project(":eglibrary:json-wrapper")
        testCompile project(":eglibrary:android-unittest-support")
    } else {
        // mavenから必要なライブラリを取得する
        compile 'com.eaglesakura:simple-logger:2.0.463'               /* Log */
        compile 'com.eaglesakura:java-commons:2.0.6'                /* Utils */
        compile 'com.eaglesakura:publd-serializer:2.0.2'            /* IDLシリアライズ */
        compile 'com.eaglesakura:geo-utils:1.1.423'                   /* GPS計算 */
        compile 'com.eaglesakura:android-commons:2.1.5'        /* Utils */
        compile 'com.eaglesakura:android-command-service:1.3.462'     /* ACE本体とのデータ通信 */
        testCompile('com.eaglesakura:json-wrapper:1.1.423')
        testCompile('com.eaglesakura:android-unittest-support:1.4.208') {
            exclude(group: "com.eaglesakura", module: "java-commons")
            exclude(group: "com.eaglesakura", module: "android-commons")
            exclude(group: "com.android.support")
        }
    }
    compile "com.android.support:support-annotations:25.3.1"
}

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25

        // SDK VERSION
        buildConfigField "String", "ACE_SDK_VERSION", "\"${ACES_SDK_VERSION}${getArtifactVersionSuffix(ARTIFACT_TYPE)}\""
        buildConfigField "String", "ACE_APPLICATION_ID", "\"org.andriders.ace\""
        buildConfigField "int", "ACE_PROTOCOL_VERSION", "2"
        buildConfigField "int", "ACE_SDK_BUILD_NUMBER", "${eglibrary.ci.buildVersionCode}"

        manifestPlaceholders = [ace_sdk_version: "${ACES_SDK_VERSION}${getArtifactVersionSuffix(ARTIFACT_TYPE)}"]
    }

    lintOptions {
        disable "DuplicateIds"  // LayoutXmlのID重複は許容する

        // 全てのロケールに対する翻訳は非現実的なので無視する
        disable "MissingTranslation"
        disable "DefaultLocale"
    }

}

/**
 * UnitTest & retro lambda
 */
tasks.withType(Test) {
    project.tasks
            .findAll {
        task -> (task.name ==~ /compile.*?TestJava.*?/)
    }
    .each { task ->
        task.doFirst {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

android.libraryVariants.all { variant ->
    if (!"release".equals(variant.name)) {
        return;
    }

    task("javadoc", type: Javadoc) {
        title = "Andriders Central Engine SDK / ver ${ACES_SDK_VERSION}${getArtifactVersionSuffix(ARTIFACT_TYPE)}"
        description "Generates Android Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar) + files("build/intermediates/classes/${variant.name}/")
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/*Dao.java' /* ignore greenDAO */
        exclude '**/DaoMaster.java' /* ignore greenDAO */
        exclude '**/DaoSession.java' /* ignore greenDAO */
        exclude '**/R.java' /* ignore greenDAO */

        options.addStringOption('Xdoclint:none', '-quiet')
        options.encoding = "UTF-8"
        project.configure(options) {
            memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
            charSet = "UTF-8"
        }
    }


    task("javadocJar", type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }
}

/**
 * バージョンを取得する
 * CircleCIの場合、バージョン末尾にビルド番号を付与する
 */
def getArtifactVersionSuffix(String artifactType) {
    def prefix = ".";
    if ("" != artifactType) {
        // 明示的に`beta`等のタイプが指定されているなら、それを付与する
        prefix = ".${artifactType}-"
    }
    if (System.env.CIRCLE_BUILD_NUM != null) {
        // CircleCIのバージョンが指定されているので、そちらを利用する
        return "${prefix}${System.env.CIRCLE_BUILD_NUM}"
    } else {
        return "${prefix}snapshot"
    }
}

apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

bintray {
    user = 'eaglesakura'
    key = BINTRAY_API_KEY
    pkg {
        repo = REPOSITORY_NAME
        name = file(".").absoluteFile.name
        licenses = BINTRAY_LICENSES
        labels = BINTRAY_LABELS
        issueTrackerUrl = "https://github.com/eaglesakura/${file(".").absoluteFile.name}/issues"
        vcsUrl = "https://github.com/eaglesakura/${file(".").absoluteFile.name}"
        version {
            name = project.version
            released = new Date()
            gpg {
                sign = true
                passphrase = BINTRAY_GPG_PASS
            }
        }
    }
    configurations = ['archives']
}
