// 3.0.x : ACE v3系列対応 / Circle CI対応
def ACES_SDK_VERSION = System.env.CIRCLE_TAG == null ?
        "3.0" : System.env.CIRCLE_TAG.substring(System.env.CIRCLE_TAG.indexOf('v') + 1)
def REPOSITORY_NAME = "maven"
def BINTRAY_LICENSES = ["MIT"]
def BINTRAY_LABELS = ["android"]
def BINTRAY_API_KEY = System.env.BINTRAY_API_KEY
def BINTRAY_GPG_PASS = System.env.BINTRAY_GPG_PASS

buildscript {
    repositories {
        google()
        jcenter()
        maven { url "https://dl.bintray.com/eaglesakura/maven/" }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.0'
        classpath "com.eaglesakura:plugin-ci-support:1.2.200"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url "https://dl.bintray.com/eaglesakura/maven/" }
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.eaglesakura.ci-support'
apply plugin: 'com.github.ben-manes.versions'

/**
 * Android Studioでのビルドとそれ以外を切り分ける
 */
if (project.hasProperty("devBuild")) {
    ext.ANDROID_STUDIO = true
    ext.ACE_SDK_VERSION_IMPL = "${ACES_SDK_VERSION}.snapshot"
    ext.ACE_SDK_BUILD_NUMBER = 1
} else {
    ext.ANDROID_STUDIO = false
    ext.ACE_SDK_VERSION_IMPL = "${ACES_SDK_VERSION}${getArtifactVersionSuffix()}"
    ext.ACE_SDK_BUILD_NUMBER = "${eglibrary.ci.buildVersionCode}"
}

group = "com.eaglesakura"
version = ACE_SDK_VERSION_IMPL

dependencies {
    // mavenから必要なライブラリを取得する
    compile 'com.eaglesakura:simple-logger:2.1.0'               /* Log */
    compile 'com.eaglesakura:java-commons:2.2.0'                /* Utils */
    compile 'com.eaglesakura:publd-serializer:2.1.0'            /* IDLシリアライズ */
    compile 'com.eaglesakura:geo-utils:1.2.0'                   /* GPS計算 */
    compile 'com.eaglesakura:android-commons:2.3.3'             /* Utils */
    compile 'com.eaglesakura:android-command-service:1.5.0'     /* ACE本体とのデータ通信 */
    testImplementation('com.eaglesakura:json-wrapper:1.2.0')
    testImplementation('com.eaglesakura:android-unittest-support:1.6.0') {
        exclude(group: "com.android.support")
    }
    implementation "com.android.support:support-annotations:26.0.0"
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    if (ANDROID_STUDIO) {
        aaptOptions.cruncherEnabled = false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 26

        // SDK VERSION
        buildConfigField "String", "ACE_SDK_VERSION", "\"${ACE_SDK_VERSION_IMPL}\""
        buildConfigField "String", "ACE_APPLICATION_ID", "\"org.andriders.ace\""
        buildConfigField "int", "ACE_PROTOCOL_VERSION", "2"
        buildConfigField "int", "ACE_SDK_BUILD_NUMBER", ACE_SDK_BUILD_NUMBER

        manifestPlaceholders = [ace_sdk_version: "${ACE_SDK_VERSION_IMPL}"]
    }

    lintOptions {
        disable "DuplicateIds"  // LayoutXmlのID重複は許容する

        // 全てのロケールに対する翻訳は非現実的なので無視する
        disable "MissingTranslation"
        disable "DefaultLocale"
    }

}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

android.libraryVariants.all { variant ->
    if (!"release".equals(variant.name)) {
        return;
    }

    task("javadoc", type: Javadoc) {
        title = "Andriders Central Engine SDK / ver ${ACES_SDK_VERSION}${getArtifactVersionSuffix()}"
        description "Generates Android Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar) + files("build/intermediates/classes/${variant.name}/")
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/*Dao.java' /* ignore greenDAO */
        exclude '**/DaoMaster.java' /* ignore greenDAO */
        exclude '**/DaoSession.java' /* ignore greenDAO */
        exclude '**/R.java' /* ignore greenDAO */

        options.addStringOption('Xdoclint:none', '-quiet')
        options.encoding = "UTF-8"
        project.configure(options) {
            memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
            charSet = "UTF-8"
        }
    }


    task("javadocJar", type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }
}

/**
 * バージョンを取得する
 * CircleCIの場合、バージョン末尾にビルド番号を付与する
 */
def getArtifactVersionSuffix() {
    String CIRCLE_TAG = System.env.CIRCLE_TAG

    if (CIRCLE_TAG != null) {
        // TAGがある場合それを直接利用する
        return ""
    }

    if (System.env.CIRCLE_BUILD_NUM != null) {
        // CircleCIのバージョンが指定されているので、そちらを利用する
        return ".build-${System.env.CIRCLE_BUILD_NUM}"
    } else {
        return ".snapshot"
    }
}

apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

bintray {
    user = 'eaglesakura'
    key = BINTRAY_API_KEY
    pkg {
        repo = REPOSITORY_NAME
        name = file(".").absoluteFile.name
        licenses = BINTRAY_LICENSES
        labels = BINTRAY_LABELS
        issueTrackerUrl = "https://github.com/eaglesakura/${file(".").absoluteFile.name}/issues"
        vcsUrl = "https://github.com/eaglesakura/${file(".").absoluteFile.name}"
        version {
            name = project.version
            released = new Date()
            gpg {
                sign = true
                passphrase = BINTRAY_GPG_PASS
            }
        }
    }
    configurations = ['archives']
}
