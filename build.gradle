// 0.4.2 : 獲得標高と傾斜に対応
// 0.4.3 : javadoc整理
// 0.4.4 : 常駐Serviceに対応
// 0.4.5 : RemoteCentralに対応 / センサーの受信時刻に対応 / 位置情報の信頼性についての情報を追加（トンネル対策）
// 0.4.6 : EGLIB module update
// 3.0.x : ACE v3系列対応 / Circle CI対応
def ACES_SDK_VERSION = "3.0";
def ARTIFACT_NAME = file(".").absoluteFile.name
def ARTIFACT_INSTALL_TARGET = getArtifactInstallTarget()

buildscript {
    repositories {
        maven { url "http://eaglesakura.github.io/maven/" }
        mavenCentral()
//        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.+'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
        classpath "com.eaglesakura:eglibrary-gradle-plugin:0.2.8"
    }
}

allprojects {
    repositories {
        maven { url "http://eaglesakura.github.io/maven/" }
        mavenCentral()
    }
}

apply plugin: 'com.android.library'

// check env
if (!hasProperty("EGLIBRARY_COMPILE_LOCAL")) {
    ext.EGLIBRARY_COMPILE_LOCAL = false // 開発用。ローカルのソースコードをビルドする
}

dependencies {
    compile 'com.android.support:support-annotations:+'

    if (EGLIBRARY_COMPILE_LOCAL) {
        // 開発用:ローカルのソースコードを利用する
        compile project(':eglibrary:simple-utils')
        compile project(':eglibrary:simple-serialize')
        compile project(':eglibrary:geo-utils')
        compile project(':eglibrary:android-simple-utils')
        compile project(':eglibrary:android-canvas-graphics')
        compile project(':eglibrary:android-command-service')
    } else {
        // mavenから必要なライブラリを取得する
        compile 'com.eaglesakura:simple-logger:+'               /* Log */
        compile 'com.eaglesakura:simple-utils:+'                /* Utils */
        compile 'com.eaglesakura:simple-serialize:+'            /* IDLシリアライズ */
        compile 'com.eaglesakura:geo-utils:+'                   /* GPS計算 */
        compile 'com.eaglesakura:android-simple-utils:+'        /* Utils */
        compile 'com.eaglesakura:android-canvas-graphics:+'     /* アイコン圧縮 */
        compile 'com.eaglesakura:android-command-service:+'     /* ACE本体とのデータ通信 */
    }

    /**
     * Unit Testing
     */
    testCompile 'junit:junit:4.12'
    testCompile "org.robolectric:robolectric:3.0"
}

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 23

        // SDK VERSION
        buildConfigField "String", "ACE_SDK_VERSION", "\"${ACES_SDK_VERSION}${getArtifactVersionSuffix()}\""
        buildConfigField "int", "ACE_PROTOCOL_VERSION", "2"
    }
}

task uploadSdkArchives << {
    tasks.uploadArchives.execute();
}

apply plugin: 'maven'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

android.libraryVariants.all { variant ->
    if (!"release".equals(variant.name)) {
        return;
    }

    task("javadoc", type: Javadoc) {
        title = "Andriders Central Engine SDK / ver ${ACES_SDK_VERSION}${getArtifactVersionSuffix()}"
        description "Generates Android Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar) + files("build/intermediates/classes/${variant.name}/")
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/*Dao.java' /* ignore greenDAO */
        exclude '**/DaoMaster.java' /* ignore greenDAO */
        exclude '**/DaoSession.java' /* ignore greenDAO */
        exclude '**/R.java' /* ignore greenDAO */
    }


    task("javadocJar", type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri(ARTIFACT_INSTALL_TARGET))
            pom.version = ACES_SDK_VERSION + getArtifactVersionSuffix()
            pom.groupId = "com.eaglesakura"
            pom.artifactId = ARTIFACT_NAME
        }
    }
}

task uploadJavadoc << {
    def src = file("build/docs/javadoc/");
    def dst = new File("${ARTIFACT_INSTALL_TARGET.absolutePath}/doc/${ARTIFACT_NAME}/");
    dst.deleteDir();
    dst.mkdirs();

    ["/usr/bin/rsync", "-a", src.absolutePath, dst.absolutePath].execute().text;
}

[uploadArchives.repositories.mavenDeployer]*.pom*.whenConfigured { pom ->
    pom.project {
        inceptionYear '2015'
        packaging 'aar'
        licenses {
            license {
                name 'NYSL'
                url 'https://raw.github.com/eaglesakura/eglibrary/master/LICENSE'
            }
        }

        dependencies {
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'simple-logger'
                version = "1.+"
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'simple-utils'
                version = "1.+"
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'simple-serialize'
                version = "1.+"
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'geo-utils'
                version = "1.+"
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'android-simple-utils'
                version = "1.+"
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'android-text-kvs'
                version = "1.+"
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'android-canvas-graphics'
                version = "1.+"
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'android-command-service'
                version = "1.+"
                scope = 'compile'
            }
        }
    }
}

/**
 * バージョンを取得する
 * CircleCIの場合、バージョン末尾にビルド番号を付与する
 */
def getArtifactVersionSuffix() {
    if (System.env.CIRCLE_BUILD_NUM != null) {
        // CircleCIのバージョンが指定されているので、そちらを利用する
        return ".${System.env.CIRCLE_BUILD_NUM}"
    } else {
        return ".local"
    }
}

/**
 * Mavenの格納先を確定する
 */
def getArtifactInstallTarget() {
    if (file("maven").directory) {
        return file("maven");
    } else if (System.env.CIRCLE_ARTIFACTS != null) {
        return file(System.env.CIRCLE_ARTIFACTS);
    } else if (System.env.MAVEN_LOCAL_REPO != null) {
        return file(System.env.MAVEN_LOCAL_REPO);
    } else {
        return file("ci-release");
    }
}
