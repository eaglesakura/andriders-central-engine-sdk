// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RemoteDeviceProtocol.proto

#ifndef PROTOBUF_RemoteDeviceProtocol_2eproto__INCLUDED
#define PROTOBUF_RemoteDeviceProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RemoteDeviceProtocol_2eproto();
void protobuf_AssignDesc_RemoteDeviceProtocol_2eproto();
void protobuf_ShutdownFile_RemoteDeviceProtocol_2eproto();

class ControllPayload;
class MasterPayload;

enum Command {
  AceBroadcast = 1,
  CameraShotRequest = 2,
  CameraShotResult = 3
};
bool Command_IsValid(int value);
const Command Command_MIN = AceBroadcast;
const Command Command_MAX = CameraShotResult;
const int Command_ARRAYSIZE = Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* Command_descriptor();
inline const ::std::string& Command_Name(Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    Command_descriptor(), value);
}
inline bool Command_Parse(
    const ::std::string& name, Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Command>(
    Command_descriptor(), name, value);
}
// ===================================================================

class ControllPayload : public ::google::protobuf::Message {
 public:
  ControllPayload();
  virtual ~ControllPayload();

  ControllPayload(const ControllPayload& from);

  inline ControllPayload& operator=(const ControllPayload& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllPayload& default_instance();

  void Swap(ControllPayload* other);

  // implements Message ----------------------------------------------

  ControllPayload* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControllPayload& from);
  void MergeFrom(const ControllPayload& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline const ::std::string& command() const;
  inline void set_command(const ::std::string& value);
  inline void set_command(const char* value);
  inline void set_command(const char* value, size_t size);
  inline ::std::string* mutable_command();
  inline ::std::string* release_command();
  inline void set_allocated_command(::std::string* command);

  // optional bytes extraPayload = 2;
  inline bool has_extrapayload() const;
  inline void clear_extrapayload();
  static const int kExtraPayloadFieldNumber = 2;
  inline const ::std::string& extrapayload() const;
  inline void set_extrapayload(const ::std::string& value);
  inline void set_extrapayload(const char* value);
  inline void set_extrapayload(const void* value, size_t size);
  inline ::std::string* mutable_extrapayload();
  inline ::std::string* release_extrapayload();
  inline void set_allocated_extrapayload(::std::string* extrapayload);

  // @@protoc_insertion_point(class_scope:ControllPayload)
 private:
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_extrapayload();
  inline void clear_has_extrapayload();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* command_;
  ::std::string* extrapayload_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_RemoteDeviceProtocol_2eproto();
  friend void protobuf_AssignDesc_RemoteDeviceProtocol_2eproto();
  friend void protobuf_ShutdownFile_RemoteDeviceProtocol_2eproto();

  void InitAsDefaultInstance();
  static ControllPayload* default_instance_;
};
// -------------------------------------------------------------------

class MasterPayload : public ::google::protobuf::Message {
 public:
  MasterPayload();
  virtual ~MasterPayload();

  MasterPayload(const MasterPayload& from);

  inline MasterPayload& operator=(const MasterPayload& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterPayload& default_instance();

  void Swap(MasterPayload* other);

  // implements Message ----------------------------------------------

  MasterPayload* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MasterPayload& from);
  void MergeFrom(const MasterPayload& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uniqueId = 1;
  inline bool has_uniqueid() const;
  inline void clear_uniqueid();
  static const int kUniqueIdFieldNumber = 1;
  inline const ::std::string& uniqueid() const;
  inline void set_uniqueid(const ::std::string& value);
  inline void set_uniqueid(const char* value);
  inline void set_uniqueid(const char* value, size_t size);
  inline ::std::string* mutable_uniqueid();
  inline ::std::string* release_uniqueid();
  inline void set_allocated_uniqueid(::std::string* uniqueid);

  // required string createdDate = 2;
  inline bool has_createddate() const;
  inline void clear_createddate();
  static const int kCreatedDateFieldNumber = 2;
  inline const ::std::string& createddate() const;
  inline void set_createddate(const ::std::string& value);
  inline void set_createddate(const char* value);
  inline void set_createddate(const char* value, size_t size);
  inline ::std::string* mutable_createddate();
  inline ::std::string* release_createddate();
  inline void set_allocated_createddate(::std::string* createddate);

  // required .ControllPayload controller = 3;
  inline bool has_controller() const;
  inline void clear_controller();
  static const int kControllerFieldNumber = 3;
  inline const ::ControllPayload& controller() const;
  inline ::ControllPayload* mutable_controller();
  inline ::ControllPayload* release_controller();
  inline void set_allocated_controller(::ControllPayload* controller);

  // @@protoc_insertion_point(class_scope:MasterPayload)
 private:
  inline void set_has_uniqueid();
  inline void clear_has_uniqueid();
  inline void set_has_createddate();
  inline void clear_has_createddate();
  inline void set_has_controller();
  inline void clear_has_controller();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uniqueid_;
  ::std::string* createddate_;
  ::ControllPayload* controller_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RemoteDeviceProtocol_2eproto();
  friend void protobuf_AssignDesc_RemoteDeviceProtocol_2eproto();
  friend void protobuf_ShutdownFile_RemoteDeviceProtocol_2eproto();

  void InitAsDefaultInstance();
  static MasterPayload* default_instance_;
};
// ===================================================================


// ===================================================================

// ControllPayload

// required string command = 1;
inline bool ControllPayload::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ControllPayload::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ControllPayload::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ControllPayload::clear_command() {
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    command_->clear();
  }
  clear_has_command();
}
inline const ::std::string& ControllPayload::command() const {
  return *command_;
}
inline void ControllPayload::set_command(const ::std::string& value) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void ControllPayload::set_command(const char* value) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void ControllPayload::set_command(const char* value, size_t size) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  command_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ControllPayload::mutable_command() {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  return command_;
}
inline ::std::string* ControllPayload::release_command() {
  clear_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = command_;
    command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ControllPayload::set_allocated_command(::std::string* command) {
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    delete command_;
  }
  if (command) {
    set_has_command();
    command_ = command;
  } else {
    clear_has_command();
    command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes extraPayload = 2;
inline bool ControllPayload::has_extrapayload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ControllPayload::set_has_extrapayload() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ControllPayload::clear_has_extrapayload() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ControllPayload::clear_extrapayload() {
  if (extrapayload_ != &::google::protobuf::internal::kEmptyString) {
    extrapayload_->clear();
  }
  clear_has_extrapayload();
}
inline const ::std::string& ControllPayload::extrapayload() const {
  return *extrapayload_;
}
inline void ControllPayload::set_extrapayload(const ::std::string& value) {
  set_has_extrapayload();
  if (extrapayload_ == &::google::protobuf::internal::kEmptyString) {
    extrapayload_ = new ::std::string;
  }
  extrapayload_->assign(value);
}
inline void ControllPayload::set_extrapayload(const char* value) {
  set_has_extrapayload();
  if (extrapayload_ == &::google::protobuf::internal::kEmptyString) {
    extrapayload_ = new ::std::string;
  }
  extrapayload_->assign(value);
}
inline void ControllPayload::set_extrapayload(const void* value, size_t size) {
  set_has_extrapayload();
  if (extrapayload_ == &::google::protobuf::internal::kEmptyString) {
    extrapayload_ = new ::std::string;
  }
  extrapayload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ControllPayload::mutable_extrapayload() {
  set_has_extrapayload();
  if (extrapayload_ == &::google::protobuf::internal::kEmptyString) {
    extrapayload_ = new ::std::string;
  }
  return extrapayload_;
}
inline ::std::string* ControllPayload::release_extrapayload() {
  clear_has_extrapayload();
  if (extrapayload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = extrapayload_;
    extrapayload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ControllPayload::set_allocated_extrapayload(::std::string* extrapayload) {
  if (extrapayload_ != &::google::protobuf::internal::kEmptyString) {
    delete extrapayload_;
  }
  if (extrapayload) {
    set_has_extrapayload();
    extrapayload_ = extrapayload;
  } else {
    clear_has_extrapayload();
    extrapayload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MasterPayload

// required string uniqueId = 1;
inline bool MasterPayload::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MasterPayload::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MasterPayload::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MasterPayload::clear_uniqueid() {
  if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
    uniqueid_->clear();
  }
  clear_has_uniqueid();
}
inline const ::std::string& MasterPayload::uniqueid() const {
  return *uniqueid_;
}
inline void MasterPayload::set_uniqueid(const ::std::string& value) {
  set_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::kEmptyString) {
    uniqueid_ = new ::std::string;
  }
  uniqueid_->assign(value);
}
inline void MasterPayload::set_uniqueid(const char* value) {
  set_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::kEmptyString) {
    uniqueid_ = new ::std::string;
  }
  uniqueid_->assign(value);
}
inline void MasterPayload::set_uniqueid(const char* value, size_t size) {
  set_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::kEmptyString) {
    uniqueid_ = new ::std::string;
  }
  uniqueid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MasterPayload::mutable_uniqueid() {
  set_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::kEmptyString) {
    uniqueid_ = new ::std::string;
  }
  return uniqueid_;
}
inline ::std::string* MasterPayload::release_uniqueid() {
  clear_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uniqueid_;
    uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MasterPayload::set_allocated_uniqueid(::std::string* uniqueid) {
  if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqueid_;
  }
  if (uniqueid) {
    set_has_uniqueid();
    uniqueid_ = uniqueid;
  } else {
    clear_has_uniqueid();
    uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string createdDate = 2;
inline bool MasterPayload::has_createddate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MasterPayload::set_has_createddate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MasterPayload::clear_has_createddate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MasterPayload::clear_createddate() {
  if (createddate_ != &::google::protobuf::internal::kEmptyString) {
    createddate_->clear();
  }
  clear_has_createddate();
}
inline const ::std::string& MasterPayload::createddate() const {
  return *createddate_;
}
inline void MasterPayload::set_createddate(const ::std::string& value) {
  set_has_createddate();
  if (createddate_ == &::google::protobuf::internal::kEmptyString) {
    createddate_ = new ::std::string;
  }
  createddate_->assign(value);
}
inline void MasterPayload::set_createddate(const char* value) {
  set_has_createddate();
  if (createddate_ == &::google::protobuf::internal::kEmptyString) {
    createddate_ = new ::std::string;
  }
  createddate_->assign(value);
}
inline void MasterPayload::set_createddate(const char* value, size_t size) {
  set_has_createddate();
  if (createddate_ == &::google::protobuf::internal::kEmptyString) {
    createddate_ = new ::std::string;
  }
  createddate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MasterPayload::mutable_createddate() {
  set_has_createddate();
  if (createddate_ == &::google::protobuf::internal::kEmptyString) {
    createddate_ = new ::std::string;
  }
  return createddate_;
}
inline ::std::string* MasterPayload::release_createddate() {
  clear_has_createddate();
  if (createddate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createddate_;
    createddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MasterPayload::set_allocated_createddate(::std::string* createddate) {
  if (createddate_ != &::google::protobuf::internal::kEmptyString) {
    delete createddate_;
  }
  if (createddate) {
    set_has_createddate();
    createddate_ = createddate;
  } else {
    clear_has_createddate();
    createddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .ControllPayload controller = 3;
inline bool MasterPayload::has_controller() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MasterPayload::set_has_controller() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MasterPayload::clear_has_controller() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MasterPayload::clear_controller() {
  if (controller_ != NULL) controller_->::ControllPayload::Clear();
  clear_has_controller();
}
inline const ::ControllPayload& MasterPayload::controller() const {
  return controller_ != NULL ? *controller_ : *default_instance_->controller_;
}
inline ::ControllPayload* MasterPayload::mutable_controller() {
  set_has_controller();
  if (controller_ == NULL) controller_ = new ::ControllPayload;
  return controller_;
}
inline ::ControllPayload* MasterPayload::release_controller() {
  clear_has_controller();
  ::ControllPayload* temp = controller_;
  controller_ = NULL;
  return temp;
}
inline void MasterPayload::set_allocated_controller(::ControllPayload* controller) {
  delete controller_;
  controller_ = controller;
  if (controller) {
    set_has_controller();
  } else {
    clear_has_controller();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Command>() {
  return ::Command_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RemoteDeviceProtocol_2eproto__INCLUDED
