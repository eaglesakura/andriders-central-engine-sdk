// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommandProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CommandProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace eaglesakura_ace {

namespace {

const ::google::protobuf::Descriptor* CameraShotPayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraShotPayload_reflection_ = NULL;
const ::google::protobuf::Descriptor* TweetControllPayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TweetControllPayload_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProximityControllPayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProximityControllPayload_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandPayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandPayload_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CommandProtocol_2eproto() {
  protobuf_AddDesc_CommandProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CommandProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  CameraShotPayload_descriptor_ = file->message_type(0);
  static const int CameraShotPayload_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraShotPayload, imagefile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraShotPayload, imagewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraShotPayload, imageheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraShotPayload, imageid_),
  };
  CameraShotPayload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraShotPayload_descriptor_,
      CameraShotPayload::default_instance_,
      CameraShotPayload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraShotPayload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraShotPayload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraShotPayload));
  TweetControllPayload_descriptor_ = file->message_type(1);
  static const int TweetControllPayload_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TweetControllPayload, tweetmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TweetControllPayload, hashtags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TweetControllPayload, rawimagefiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TweetControllPayload, imageuris_),
  };
  TweetControllPayload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TweetControllPayload_descriptor_,
      TweetControllPayload::default_instance_,
      TweetControllPayload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TweetControllPayload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TweetControllPayload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TweetControllPayload));
  ProximityControllPayload_descriptor_ = file->message_type(2);
  static const int ProximityControllPayload_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProximityControllPayload, commandsec_),
  };
  ProximityControllPayload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProximityControllPayload_descriptor_,
      ProximityControllPayload::default_instance_,
      ProximityControllPayload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProximityControllPayload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProximityControllPayload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProximityControllPayload));
  CommandPayload_descriptor_ = file->message_type(3);
  static const int CommandPayload_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPayload, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPayload, extrapayload_),
  };
  CommandPayload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandPayload_descriptor_,
      CommandPayload::default_instance_,
      CommandPayload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPayload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPayload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandPayload));
  Command_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CommandProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraShotPayload_descriptor_, &CameraShotPayload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TweetControllPayload_descriptor_, &TweetControllPayload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProximityControllPayload_descriptor_, &ProximityControllPayload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandPayload_descriptor_, &CommandPayload::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CommandProtocol_2eproto() {
  delete CameraShotPayload::default_instance_;
  delete CameraShotPayload_reflection_;
  delete TweetControllPayload::default_instance_;
  delete TweetControllPayload_reflection_;
  delete ProximityControllPayload::default_instance_;
  delete ProximityControllPayload_reflection_;
  delete CommandPayload::default_instance_;
  delete CommandPayload_reflection_;
}

void protobuf_AddDesc_CommandProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::eaglesakura_ace::protobuf_AddDesc_AceConstants_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025CommandProtocol.proto\022\017eaglesakura_ace"
    "\032\022AceConstants.proto\"`\n\021CameraShotPayloa"
    "d\022\021\n\timageFile\030\001 \001(\014\022\022\n\nimageWidth\030\002 \002(\005"
    "\022\023\n\013imageHeight\030\003 \002(\005\022\017\n\007imageId\030\004 \002(\t\"h"
    "\n\024TweetControllPayload\022\024\n\014tweetMessage\030\001"
    " \002(\t\022\020\n\010hashtags\030\002 \003(\t\022\025\n\rrawImageFiles\030"
    "\003 \003(\014\022\021\n\timageUris\030\004 \003(\t\".\n\030ProximityCon"
    "trollPayload\022\022\n\ncommandSec\030\001 \002(\005\"7\n\016Comm"
    "andPayload\022\017\n\007command\030\001 \002(\t\022\024\n\014extraPayl"
    "oad\030\002 \001(\014*^\n\007Command\022\025\n\021CameraShotReques"
    "t\020\002\022\022\n\016CameraShotData\020\003\022\021\n\rTweetControll"
    "\020\004\022\025\n\021ProximityControll\020\005B$\n\"com.eaglesa"
    "kura.andriders.protocol", 503);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CommandProtocol.proto", &protobuf_RegisterTypes);
  CameraShotPayload::default_instance_ = new CameraShotPayload();
  TweetControllPayload::default_instance_ = new TweetControllPayload();
  ProximityControllPayload::default_instance_ = new ProximityControllPayload();
  CommandPayload::default_instance_ = new CommandPayload();
  CameraShotPayload::default_instance_->InitAsDefaultInstance();
  TweetControllPayload::default_instance_->InitAsDefaultInstance();
  ProximityControllPayload::default_instance_->InitAsDefaultInstance();
  CommandPayload::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CommandProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CommandProtocol_2eproto {
  StaticDescriptorInitializer_CommandProtocol_2eproto() {
    protobuf_AddDesc_CommandProtocol_2eproto();
  }
} static_descriptor_initializer_CommandProtocol_2eproto_;
const ::google::protobuf::EnumDescriptor* Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}
bool Command_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CameraShotPayload::kImageFileFieldNumber;
const int CameraShotPayload::kImageWidthFieldNumber;
const int CameraShotPayload::kImageHeightFieldNumber;
const int CameraShotPayload::kImageIdFieldNumber;
#endif  // !_MSC_VER

CameraShotPayload::CameraShotPayload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CameraShotPayload::InitAsDefaultInstance() {
}

CameraShotPayload::CameraShotPayload(const CameraShotPayload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CameraShotPayload::SharedCtor() {
  _cached_size_ = 0;
  imagefile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imagewidth_ = 0;
  imageheight_ = 0;
  imageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraShotPayload::~CameraShotPayload() {
  SharedDtor();
}

void CameraShotPayload::SharedDtor() {
  if (imagefile_ != &::google::protobuf::internal::kEmptyString) {
    delete imagefile_;
  }
  if (imageid_ != &::google::protobuf::internal::kEmptyString) {
    delete imageid_;
  }
  if (this != default_instance_) {
  }
}

void CameraShotPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraShotPayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraShotPayload_descriptor_;
}

const CameraShotPayload& CameraShotPayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommandProtocol_2eproto();
  return *default_instance_;
}

CameraShotPayload* CameraShotPayload::default_instance_ = NULL;

CameraShotPayload* CameraShotPayload::New() const {
  return new CameraShotPayload;
}

void CameraShotPayload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_imagefile()) {
      if (imagefile_ != &::google::protobuf::internal::kEmptyString) {
        imagefile_->clear();
      }
    }
    imagewidth_ = 0;
    imageheight_ = 0;
    if (has_imageid()) {
      if (imageid_ != &::google::protobuf::internal::kEmptyString) {
        imageid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraShotPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes imageFile = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imagefile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_imageWidth;
        break;
      }

      // required int32 imageWidth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_imageWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imagewidth_)));
          set_has_imagewidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_imageHeight;
        break;
      }

      // required int32 imageHeight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_imageHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imageheight_)));
          set_has_imageheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_imageId;
        break;
      }

      // required string imageId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imageid().data(), this->imageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CameraShotPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes imageFile = 1;
  if (has_imagefile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->imagefile(), output);
  }

  // required int32 imageWidth = 2;
  if (has_imagewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->imagewidth(), output);
  }

  // required int32 imageHeight = 3;
  if (has_imageheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->imageheight(), output);
  }

  // required string imageId = 4;
  if (has_imageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imageid().data(), this->imageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->imageid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CameraShotPayload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes imageFile = 1;
  if (has_imagefile()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->imagefile(), target);
  }

  // required int32 imageWidth = 2;
  if (has_imagewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->imagewidth(), target);
  }

  // required int32 imageHeight = 3;
  if (has_imageheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->imageheight(), target);
  }

  // required string imageId = 4;
  if (has_imageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imageid().data(), this->imageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->imageid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CameraShotPayload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes imageFile = 1;
    if (has_imagefile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imagefile());
    }

    // required int32 imageWidth = 2;
    if (has_imagewidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imagewidth());
    }

    // required int32 imageHeight = 3;
    if (has_imageheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imageheight());
    }

    // required string imageId = 4;
    if (has_imageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imageid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraShotPayload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraShotPayload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraShotPayload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraShotPayload::MergeFrom(const CameraShotPayload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imagefile()) {
      set_imagefile(from.imagefile());
    }
    if (from.has_imagewidth()) {
      set_imagewidth(from.imagewidth());
    }
    if (from.has_imageheight()) {
      set_imageheight(from.imageheight());
    }
    if (from.has_imageid()) {
      set_imageid(from.imageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraShotPayload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraShotPayload::CopyFrom(const CameraShotPayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraShotPayload::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void CameraShotPayload::Swap(CameraShotPayload* other) {
  if (other != this) {
    std::swap(imagefile_, other->imagefile_);
    std::swap(imagewidth_, other->imagewidth_);
    std::swap(imageheight_, other->imageheight_);
    std::swap(imageid_, other->imageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraShotPayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraShotPayload_descriptor_;
  metadata.reflection = CameraShotPayload_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TweetControllPayload::kTweetMessageFieldNumber;
const int TweetControllPayload::kHashtagsFieldNumber;
const int TweetControllPayload::kRawImageFilesFieldNumber;
const int TweetControllPayload::kImageUrisFieldNumber;
#endif  // !_MSC_VER

TweetControllPayload::TweetControllPayload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TweetControllPayload::InitAsDefaultInstance() {
}

TweetControllPayload::TweetControllPayload(const TweetControllPayload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TweetControllPayload::SharedCtor() {
  _cached_size_ = 0;
  tweetmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TweetControllPayload::~TweetControllPayload() {
  SharedDtor();
}

void TweetControllPayload::SharedDtor() {
  if (tweetmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete tweetmessage_;
  }
  if (this != default_instance_) {
  }
}

void TweetControllPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TweetControllPayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TweetControllPayload_descriptor_;
}

const TweetControllPayload& TweetControllPayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommandProtocol_2eproto();
  return *default_instance_;
}

TweetControllPayload* TweetControllPayload::default_instance_ = NULL;

TweetControllPayload* TweetControllPayload::New() const {
  return new TweetControllPayload;
}

void TweetControllPayload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tweetmessage()) {
      if (tweetmessage_ != &::google::protobuf::internal::kEmptyString) {
        tweetmessage_->clear();
      }
    }
  }
  hashtags_.Clear();
  rawimagefiles_.Clear();
  imageuris_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TweetControllPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tweetMessage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tweetmessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tweetmessage().data(), this->tweetmessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hashtags;
        break;
      }

      // repeated string hashtags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hashtags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hashtags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hashtags(this->hashtags_size() - 1).data(),
            this->hashtags(this->hashtags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hashtags;
        if (input->ExpectTag(26)) goto parse_rawImageFiles;
        break;
      }

      // repeated bytes rawImageFiles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rawImageFiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_rawimagefiles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rawImageFiles;
        if (input->ExpectTag(34)) goto parse_imageUris;
        break;
      }

      // repeated string imageUris = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageUris:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_imageuris()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imageuris(this->imageuris_size() - 1).data(),
            this->imageuris(this->imageuris_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_imageUris;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TweetControllPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string tweetMessage = 1;
  if (has_tweetmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tweetmessage().data(), this->tweetmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tweetmessage(), output);
  }

  // repeated string hashtags = 2;
  for (int i = 0; i < this->hashtags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->hashtags(i).data(), this->hashtags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hashtags(i), output);
  }

  // repeated bytes rawImageFiles = 3;
  for (int i = 0; i < this->rawimagefiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->rawimagefiles(i), output);
  }

  // repeated string imageUris = 4;
  for (int i = 0; i < this->imageuris_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->imageuris(i).data(), this->imageuris(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->imageuris(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TweetControllPayload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string tweetMessage = 1;
  if (has_tweetmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tweetmessage().data(), this->tweetmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tweetmessage(), target);
  }

  // repeated string hashtags = 2;
  for (int i = 0; i < this->hashtags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hashtags(i).data(), this->hashtags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->hashtags(i), target);
  }

  // repeated bytes rawImageFiles = 3;
  for (int i = 0; i < this->rawimagefiles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->rawimagefiles(i), target);
  }

  // repeated string imageUris = 4;
  for (int i = 0; i < this->imageuris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imageuris(i).data(), this->imageuris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->imageuris(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TweetControllPayload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string tweetMessage = 1;
    if (has_tweetmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tweetmessage());
    }

  }
  // repeated string hashtags = 2;
  total_size += 1 * this->hashtags_size();
  for (int i = 0; i < this->hashtags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hashtags(i));
  }

  // repeated bytes rawImageFiles = 3;
  total_size += 1 * this->rawimagefiles_size();
  for (int i = 0; i < this->rawimagefiles_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->rawimagefiles(i));
  }

  // repeated string imageUris = 4;
  total_size += 1 * this->imageuris_size();
  for (int i = 0; i < this->imageuris_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->imageuris(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TweetControllPayload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TweetControllPayload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TweetControllPayload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TweetControllPayload::MergeFrom(const TweetControllPayload& from) {
  GOOGLE_CHECK_NE(&from, this);
  hashtags_.MergeFrom(from.hashtags_);
  rawimagefiles_.MergeFrom(from.rawimagefiles_);
  imageuris_.MergeFrom(from.imageuris_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tweetmessage()) {
      set_tweetmessage(from.tweetmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TweetControllPayload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TweetControllPayload::CopyFrom(const TweetControllPayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TweetControllPayload::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TweetControllPayload::Swap(TweetControllPayload* other) {
  if (other != this) {
    std::swap(tweetmessage_, other->tweetmessage_);
    hashtags_.Swap(&other->hashtags_);
    rawimagefiles_.Swap(&other->rawimagefiles_);
    imageuris_.Swap(&other->imageuris_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TweetControllPayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TweetControllPayload_descriptor_;
  metadata.reflection = TweetControllPayload_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProximityControllPayload::kCommandSecFieldNumber;
#endif  // !_MSC_VER

ProximityControllPayload::ProximityControllPayload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProximityControllPayload::InitAsDefaultInstance() {
}

ProximityControllPayload::ProximityControllPayload(const ProximityControllPayload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProximityControllPayload::SharedCtor() {
  _cached_size_ = 0;
  commandsec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProximityControllPayload::~ProximityControllPayload() {
  SharedDtor();
}

void ProximityControllPayload::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProximityControllPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProximityControllPayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProximityControllPayload_descriptor_;
}

const ProximityControllPayload& ProximityControllPayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommandProtocol_2eproto();
  return *default_instance_;
}

ProximityControllPayload* ProximityControllPayload::default_instance_ = NULL;

ProximityControllPayload* ProximityControllPayload::New() const {
  return new ProximityControllPayload;
}

void ProximityControllPayload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    commandsec_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProximityControllPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 commandSec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commandsec_)));
          set_has_commandsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProximityControllPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 commandSec = 1;
  if (has_commandsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->commandsec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProximityControllPayload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 commandSec = 1;
  if (has_commandsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->commandsec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProximityControllPayload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 commandSec = 1;
    if (has_commandsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commandsec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProximityControllPayload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProximityControllPayload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProximityControllPayload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProximityControllPayload::MergeFrom(const ProximityControllPayload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commandsec()) {
      set_commandsec(from.commandsec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProximityControllPayload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProximityControllPayload::CopyFrom(const ProximityControllPayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProximityControllPayload::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ProximityControllPayload::Swap(ProximityControllPayload* other) {
  if (other != this) {
    std::swap(commandsec_, other->commandsec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProximityControllPayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProximityControllPayload_descriptor_;
  metadata.reflection = ProximityControllPayload_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandPayload::kCommandFieldNumber;
const int CommandPayload::kExtraPayloadFieldNumber;
#endif  // !_MSC_VER

CommandPayload::CommandPayload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandPayload::InitAsDefaultInstance() {
}

CommandPayload::CommandPayload(const CommandPayload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandPayload::SharedCtor() {
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extrapayload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandPayload::~CommandPayload() {
  SharedDtor();
}

void CommandPayload::SharedDtor() {
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    delete command_;
  }
  if (extrapayload_ != &::google::protobuf::internal::kEmptyString) {
    delete extrapayload_;
  }
  if (this != default_instance_) {
  }
}

void CommandPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandPayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandPayload_descriptor_;
}

const CommandPayload& CommandPayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommandProtocol_2eproto();
  return *default_instance_;
}

CommandPayload* CommandPayload::default_instance_ = NULL;

CommandPayload* CommandPayload::New() const {
  return new CommandPayload;
}

void CommandPayload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_command()) {
      if (command_ != &::google::protobuf::internal::kEmptyString) {
        command_->clear();
      }
    }
    if (has_extrapayload()) {
      if (extrapayload_ != &::google::protobuf::internal::kEmptyString) {
        extrapayload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_extraPayload;
        break;
      }

      // optional bytes extraPayload = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extraPayload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extrapayload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command(), output);
  }

  // optional bytes extraPayload = 2;
  if (has_extrapayload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->extrapayload(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandPayload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }

  // optional bytes extraPayload = 2;
  if (has_extrapayload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->extrapayload(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandPayload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

    // optional bytes extraPayload = 2;
    if (has_extrapayload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->extrapayload());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandPayload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandPayload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandPayload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandPayload::MergeFrom(const CommandPayload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_extrapayload()) {
      set_extrapayload(from.extrapayload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandPayload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandPayload::CopyFrom(const CommandPayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPayload::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CommandPayload::Swap(CommandPayload* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(extrapayload_, other->extrapayload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandPayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandPayload_descriptor_;
  metadata.reflection = CommandPayload_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace eaglesakura_ace

// @@protoc_insertion_point(global_scope)
