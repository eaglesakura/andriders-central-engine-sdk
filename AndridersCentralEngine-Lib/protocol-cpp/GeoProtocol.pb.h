// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GeoProtocol.proto

#ifndef PROTOBUF_GeoProtocol_2eproto__INCLUDED
#define PROTOBUF_GeoProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "AceConstants.pb.h"
// @@protoc_insertion_point(includes)

namespace eaglesakura_ace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GeoProtocol_2eproto();
void protobuf_AssignDesc_GeoProtocol_2eproto();
void protobuf_ShutdownFile_GeoProtocol_2eproto();

class Location;
class GeoStatus;

enum LocationMoving {
  In = 1,
  Out = 2
};
bool LocationMoving_IsValid(int value);
const LocationMoving LocationMoving_MIN = In;
const LocationMoving LocationMoving_MAX = Out;
const int LocationMoving_ARRAYSIZE = LocationMoving_MAX + 1;

const ::google::protobuf::EnumDescriptor* LocationMoving_descriptor();
inline const ::std::string& LocationMoving_Name(LocationMoving value) {
  return ::google::protobuf::internal::NameOfEnum(
    LocationMoving_descriptor(), value);
}
inline bool LocationMoving_Parse(
    const ::std::string& name, LocationMoving* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LocationMoving>(
    LocationMoving_descriptor(), name, value);
}
// ===================================================================

class Location : public ::google::protobuf::Message {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  void Swap(Location* other);

  // implements Message ----------------------------------------------

  Location* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double latitude = 1;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  inline double latitude() const;
  inline void set_latitude(double value);

  // required double longitude = 2;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  inline double longitude() const;
  inline void set_longitude(double value);

  // @@protoc_insertion_point(class_scope:eaglesakura_ace.Location)
 private:
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double latitude_;
  double longitude_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GeoProtocol_2eproto();
  friend void protobuf_AssignDesc_GeoProtocol_2eproto();
  friend void protobuf_ShutdownFile_GeoProtocol_2eproto();

  void InitAsDefaultInstance();
  static Location* default_instance_;
};
// -------------------------------------------------------------------

class GeoStatus : public ::google::protobuf::Message {
 public:
  GeoStatus();
  virtual ~GeoStatus();

  GeoStatus(const GeoStatus& from);

  inline GeoStatus& operator=(const GeoStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeoStatus& default_instance();

  void Swap(GeoStatus* other);

  // implements Message ----------------------------------------------

  GeoStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GeoStatus& from);
  void MergeFrom(const GeoStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .eaglesakura_ace.Location loc = 1;
  inline bool has_loc() const;
  inline void clear_loc();
  static const int kLocFieldNumber = 1;
  inline const ::eaglesakura_ace::Location& loc() const;
  inline ::eaglesakura_ace::Location* mutable_loc();
  inline ::eaglesakura_ace::Location* release_loc();
  inline void set_allocated_loc(::eaglesakura_ace::Location* loc);

  // required string geohash = 2;
  inline bool has_geohash() const;
  inline void clear_geohash();
  static const int kGeohashFieldNumber = 2;
  inline const ::std::string& geohash() const;
  inline void set_geohash(const ::std::string& value);
  inline void set_geohash(const char* value);
  inline void set_geohash(const char* value, size_t size);
  inline ::std::string* mutable_geohash();
  inline ::std::string* release_geohash();
  inline void set_allocated_geohash(::std::string* geohash);

  // @@protoc_insertion_point(class_scope:eaglesakura_ace.GeoStatus)
 private:
  inline void set_has_loc();
  inline void clear_has_loc();
  inline void set_has_geohash();
  inline void clear_has_geohash();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::eaglesakura_ace::Location* loc_;
  ::std::string* geohash_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GeoProtocol_2eproto();
  friend void protobuf_AssignDesc_GeoProtocol_2eproto();
  friend void protobuf_ShutdownFile_GeoProtocol_2eproto();

  void InitAsDefaultInstance();
  static GeoStatus* default_instance_;
};
// ===================================================================


// ===================================================================

// Location

// required double latitude = 1;
inline bool Location::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Location::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Location::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Location::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double Location::latitude() const {
  return latitude_;
}
inline void Location::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
}

// required double longitude = 2;
inline bool Location::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Location::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Location::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Location::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double Location::longitude() const {
  return longitude_;
}
inline void Location::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
}

// -------------------------------------------------------------------

// GeoStatus

// required .eaglesakura_ace.Location loc = 1;
inline bool GeoStatus::has_loc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeoStatus::set_has_loc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeoStatus::clear_has_loc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeoStatus::clear_loc() {
  if (loc_ != NULL) loc_->::eaglesakura_ace::Location::Clear();
  clear_has_loc();
}
inline const ::eaglesakura_ace::Location& GeoStatus::loc() const {
  return loc_ != NULL ? *loc_ : *default_instance_->loc_;
}
inline ::eaglesakura_ace::Location* GeoStatus::mutable_loc() {
  set_has_loc();
  if (loc_ == NULL) loc_ = new ::eaglesakura_ace::Location;
  return loc_;
}
inline ::eaglesakura_ace::Location* GeoStatus::release_loc() {
  clear_has_loc();
  ::eaglesakura_ace::Location* temp = loc_;
  loc_ = NULL;
  return temp;
}
inline void GeoStatus::set_allocated_loc(::eaglesakura_ace::Location* loc) {
  delete loc_;
  loc_ = loc;
  if (loc) {
    set_has_loc();
  } else {
    clear_has_loc();
  }
}

// required string geohash = 2;
inline bool GeoStatus::has_geohash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeoStatus::set_has_geohash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GeoStatus::clear_has_geohash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GeoStatus::clear_geohash() {
  if (geohash_ != &::google::protobuf::internal::kEmptyString) {
    geohash_->clear();
  }
  clear_has_geohash();
}
inline const ::std::string& GeoStatus::geohash() const {
  return *geohash_;
}
inline void GeoStatus::set_geohash(const ::std::string& value) {
  set_has_geohash();
  if (geohash_ == &::google::protobuf::internal::kEmptyString) {
    geohash_ = new ::std::string;
  }
  geohash_->assign(value);
}
inline void GeoStatus::set_geohash(const char* value) {
  set_has_geohash();
  if (geohash_ == &::google::protobuf::internal::kEmptyString) {
    geohash_ = new ::std::string;
  }
  geohash_->assign(value);
}
inline void GeoStatus::set_geohash(const char* value, size_t size) {
  set_has_geohash();
  if (geohash_ == &::google::protobuf::internal::kEmptyString) {
    geohash_ = new ::std::string;
  }
  geohash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GeoStatus::mutable_geohash() {
  set_has_geohash();
  if (geohash_ == &::google::protobuf::internal::kEmptyString) {
    geohash_ = new ::std::string;
  }
  return geohash_;
}
inline ::std::string* GeoStatus::release_geohash() {
  clear_has_geohash();
  if (geohash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = geohash_;
    geohash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GeoStatus::set_allocated_geohash(::std::string* geohash) {
  if (geohash_ != &::google::protobuf::internal::kEmptyString) {
    delete geohash_;
  }
  if (geohash) {
    set_has_geohash();
    geohash_ = geohash;
  } else {
    clear_has_geohash();
    geohash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace eaglesakura_ace

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eaglesakura_ace::LocationMoving>() {
  return ::eaglesakura_ace::LocationMoving_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GeoProtocol_2eproto__INCLUDED
