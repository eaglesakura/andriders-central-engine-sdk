// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AcesProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AcesProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace eaglesakura_ace {

namespace {

const ::google::protobuf::Descriptor* VersionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VersionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CentralStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CentralStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterPayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterPayload_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AcesProtocol_2eproto() {
  protobuf_AddDesc_AcesProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AcesProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  VersionInfo_descriptor_ = file->message_type(0);
  static const int VersionInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, protocolversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, appversionname_),
  };
  VersionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VersionInfo_descriptor_,
      VersionInfo::default_instance_,
      VersionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VersionInfo));
  CentralStatus_descriptor_ = file->message_type(1);
  static const int CentralStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CentralStatus, connectedheartrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CentralStatus, connectedcadence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CentralStatus, connectedspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CentralStatus, connectedtwitter_),
  };
  CentralStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CentralStatus_descriptor_,
      CentralStatus::default_instance_,
      CentralStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CentralStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CentralStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CentralStatus));
  MasterPayload_descriptor_ = file->message_type(2);
  static const int MasterPayload_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterPayload, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterPayload, createddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterPayload, senderpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterPayload, targetpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterPayload, centralstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterPayload, geostatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterPayload, sensorpayloads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterPayload, commandpayloads_),
  };
  MasterPayload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MasterPayload_descriptor_,
      MasterPayload::default_instance_,
      MasterPayload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterPayload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterPayload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MasterPayload));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AcesProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VersionInfo_descriptor_, &VersionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CentralStatus_descriptor_, &CentralStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MasterPayload_descriptor_, &MasterPayload::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AcesProtocol_2eproto() {
  delete VersionInfo::default_instance_;
  delete VersionInfo_reflection_;
  delete CentralStatus::default_instance_;
  delete CentralStatus_reflection_;
  delete MasterPayload::default_instance_;
  delete MasterPayload_reflection_;
}

void protobuf_AddDesc_AcesProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::eaglesakura_ace::protobuf_AddDesc_AcesConstants_2eproto();
  ::eaglesakura_ace::protobuf_AddDesc_SensorProtocol_2eproto();
  ::eaglesakura_ace::protobuf_AddDesc_CommandProtocol_2eproto();
  ::eaglesakura_ace::protobuf_AddDesc_GeoProtocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022AcesProtocol.proto\022\017eaglesakura_ace\032\023A"
    "cesConstants.proto\032\024SensorProtocol.proto"
    "\032\025CommandProtocol.proto\032\021GeoProtocol.pro"
    "to\">\n\013VersionInfo\022\027\n\017protocolVersion\030\001 \002"
    "(\003\022\026\n\016appVersionName\030\002 \002(\t\"w\n\rCentralSta"
    "tus\022\032\n\022connectedHeartrate\030\001 \002(\010\022\030\n\020conne"
    "ctedCadence\030\002 \002(\010\022\026\n\016connectedSpeed\030\003 \002("
    "\010\022\030\n\020connectedTwitter\030\004 \002(\010\"\275\002\n\rMasterPa"
    "yload\022\020\n\010uniqueId\030\004 \002(\t\022\023\n\013createdDate\030\003"
    " \002(\t\022\025\n\rsenderPackage\030\007 \002(\t\022\025\n\rtargetPac"
    "kage\030\006 \001(\t\0225\n\rcentralStatus\030\001 \001(\0132\036.eagl"
    "esakura_ace.CentralStatus\022.\n\tgeoStatus\030\010"
    " \001(\0132\033.eaglesakura_ace.GeoPayload\0226\n\016sen"
    "sorPayloads\030\002 \003(\0132\036.eaglesakura_ace.Sens"
    "orPayload\0228\n\017commandPayloads\030\005 \003(\0132\037.eag"
    "lesakura_ace.CommandPayloadB$\n\"com.eagle"
    "sakura.andriders.protocol", 665);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AcesProtocol.proto", &protobuf_RegisterTypes);
  VersionInfo::default_instance_ = new VersionInfo();
  CentralStatus::default_instance_ = new CentralStatus();
  MasterPayload::default_instance_ = new MasterPayload();
  VersionInfo::default_instance_->InitAsDefaultInstance();
  CentralStatus::default_instance_->InitAsDefaultInstance();
  MasterPayload::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AcesProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AcesProtocol_2eproto {
  StaticDescriptorInitializer_AcesProtocol_2eproto() {
    protobuf_AddDesc_AcesProtocol_2eproto();
  }
} static_descriptor_initializer_AcesProtocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int VersionInfo::kProtocolVersionFieldNumber;
const int VersionInfo::kAppVersionNameFieldNumber;
#endif  // !_MSC_VER

VersionInfo::VersionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VersionInfo::InitAsDefaultInstance() {
}

VersionInfo::VersionInfo(const VersionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VersionInfo::SharedCtor() {
  _cached_size_ = 0;
  protocolversion_ = GOOGLE_LONGLONG(0);
  appversionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VersionInfo::~VersionInfo() {
  SharedDtor();
}

void VersionInfo::SharedDtor() {
  if (appversionname_ != &::google::protobuf::internal::kEmptyString) {
    delete appversionname_;
  }
  if (this != default_instance_) {
  }
}

void VersionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VersionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VersionInfo_descriptor_;
}

const VersionInfo& VersionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AcesProtocol_2eproto();
  return *default_instance_;
}

VersionInfo* VersionInfo::default_instance_ = NULL;

VersionInfo* VersionInfo::New() const {
  return new VersionInfo;
}

void VersionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protocolversion_ = GOOGLE_LONGLONG(0);
    if (has_appversionname()) {
      if (appversionname_ != &::google::protobuf::internal::kEmptyString) {
        appversionname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VersionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 protocolVersion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &protocolversion_)));
          set_has_protocolversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appVersionName;
        break;
      }

      // required string appVersionName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appVersionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appversionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appversionname().data(), this->appversionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VersionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 protocolVersion = 1;
  if (has_protocolversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->protocolversion(), output);
  }

  // required string appVersionName = 2;
  if (has_appversionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appversionname().data(), this->appversionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->appversionname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VersionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 protocolVersion = 1;
  if (has_protocolversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->protocolversion(), target);
  }

  // required string appVersionName = 2;
  if (has_appversionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appversionname().data(), this->appversionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appversionname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VersionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 protocolVersion = 1;
    if (has_protocolversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->protocolversion());
    }

    // required string appVersionName = 2;
    if (has_appversionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appversionname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VersionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VersionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VersionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VersionInfo::MergeFrom(const VersionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocolversion()) {
      set_protocolversion(from.protocolversion());
    }
    if (from.has_appversionname()) {
      set_appversionname(from.appversionname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VersionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionInfo::CopyFrom(const VersionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VersionInfo::Swap(VersionInfo* other) {
  if (other != this) {
    std::swap(protocolversion_, other->protocolversion_);
    std::swap(appversionname_, other->appversionname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VersionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VersionInfo_descriptor_;
  metadata.reflection = VersionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CentralStatus::kConnectedHeartrateFieldNumber;
const int CentralStatus::kConnectedCadenceFieldNumber;
const int CentralStatus::kConnectedSpeedFieldNumber;
const int CentralStatus::kConnectedTwitterFieldNumber;
#endif  // !_MSC_VER

CentralStatus::CentralStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CentralStatus::InitAsDefaultInstance() {
}

CentralStatus::CentralStatus(const CentralStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CentralStatus::SharedCtor() {
  _cached_size_ = 0;
  connectedheartrate_ = false;
  connectedcadence_ = false;
  connectedspeed_ = false;
  connectedtwitter_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CentralStatus::~CentralStatus() {
  SharedDtor();
}

void CentralStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CentralStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CentralStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CentralStatus_descriptor_;
}

const CentralStatus& CentralStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AcesProtocol_2eproto();
  return *default_instance_;
}

CentralStatus* CentralStatus::default_instance_ = NULL;

CentralStatus* CentralStatus::New() const {
  return new CentralStatus;
}

void CentralStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connectedheartrate_ = false;
    connectedcadence_ = false;
    connectedspeed_ = false;
    connectedtwitter_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CentralStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool connectedHeartrate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connectedheartrate_)));
          set_has_connectedheartrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_connectedCadence;
        break;
      }

      // required bool connectedCadence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connectedCadence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connectedcadence_)));
          set_has_connectedcadence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_connectedSpeed;
        break;
      }

      // required bool connectedSpeed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connectedSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connectedspeed_)));
          set_has_connectedspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_connectedTwitter;
        break;
      }

      // required bool connectedTwitter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connectedTwitter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connectedtwitter_)));
          set_has_connectedtwitter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CentralStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool connectedHeartrate = 1;
  if (has_connectedheartrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->connectedheartrate(), output);
  }

  // required bool connectedCadence = 2;
  if (has_connectedcadence()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->connectedcadence(), output);
  }

  // required bool connectedSpeed = 3;
  if (has_connectedspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->connectedspeed(), output);
  }

  // required bool connectedTwitter = 4;
  if (has_connectedtwitter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->connectedtwitter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CentralStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool connectedHeartrate = 1;
  if (has_connectedheartrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->connectedheartrate(), target);
  }

  // required bool connectedCadence = 2;
  if (has_connectedcadence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->connectedcadence(), target);
  }

  // required bool connectedSpeed = 3;
  if (has_connectedspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->connectedspeed(), target);
  }

  // required bool connectedTwitter = 4;
  if (has_connectedtwitter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->connectedtwitter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CentralStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool connectedHeartrate = 1;
    if (has_connectedheartrate()) {
      total_size += 1 + 1;
    }

    // required bool connectedCadence = 2;
    if (has_connectedcadence()) {
      total_size += 1 + 1;
    }

    // required bool connectedSpeed = 3;
    if (has_connectedspeed()) {
      total_size += 1 + 1;
    }

    // required bool connectedTwitter = 4;
    if (has_connectedtwitter()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CentralStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CentralStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CentralStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CentralStatus::MergeFrom(const CentralStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connectedheartrate()) {
      set_connectedheartrate(from.connectedheartrate());
    }
    if (from.has_connectedcadence()) {
      set_connectedcadence(from.connectedcadence());
    }
    if (from.has_connectedspeed()) {
      set_connectedspeed(from.connectedspeed());
    }
    if (from.has_connectedtwitter()) {
      set_connectedtwitter(from.connectedtwitter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CentralStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CentralStatus::CopyFrom(const CentralStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CentralStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CentralStatus::Swap(CentralStatus* other) {
  if (other != this) {
    std::swap(connectedheartrate_, other->connectedheartrate_);
    std::swap(connectedcadence_, other->connectedcadence_);
    std::swap(connectedspeed_, other->connectedspeed_);
    std::swap(connectedtwitter_, other->connectedtwitter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CentralStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CentralStatus_descriptor_;
  metadata.reflection = CentralStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MasterPayload::kUniqueIdFieldNumber;
const int MasterPayload::kCreatedDateFieldNumber;
const int MasterPayload::kSenderPackageFieldNumber;
const int MasterPayload::kTargetPackageFieldNumber;
const int MasterPayload::kCentralStatusFieldNumber;
const int MasterPayload::kGeoStatusFieldNumber;
const int MasterPayload::kSensorPayloadsFieldNumber;
const int MasterPayload::kCommandPayloadsFieldNumber;
#endif  // !_MSC_VER

MasterPayload::MasterPayload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MasterPayload::InitAsDefaultInstance() {
  centralstatus_ = const_cast< ::eaglesakura_ace::CentralStatus*>(&::eaglesakura_ace::CentralStatus::default_instance());
  geostatus_ = const_cast< ::eaglesakura_ace::GeoPayload*>(&::eaglesakura_ace::GeoPayload::default_instance());
}

MasterPayload::MasterPayload(const MasterPayload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MasterPayload::SharedCtor() {
  _cached_size_ = 0;
  uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  senderpackage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  targetpackage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  centralstatus_ = NULL;
  geostatus_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterPayload::~MasterPayload() {
  SharedDtor();
}

void MasterPayload::SharedDtor() {
  if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqueid_;
  }
  if (createddate_ != &::google::protobuf::internal::kEmptyString) {
    delete createddate_;
  }
  if (senderpackage_ != &::google::protobuf::internal::kEmptyString) {
    delete senderpackage_;
  }
  if (targetpackage_ != &::google::protobuf::internal::kEmptyString) {
    delete targetpackage_;
  }
  if (this != default_instance_) {
    delete centralstatus_;
    delete geostatus_;
  }
}

void MasterPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterPayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterPayload_descriptor_;
}

const MasterPayload& MasterPayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AcesProtocol_2eproto();
  return *default_instance_;
}

MasterPayload* MasterPayload::default_instance_ = NULL;

MasterPayload* MasterPayload::New() const {
  return new MasterPayload;
}

void MasterPayload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uniqueid()) {
      if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
        uniqueid_->clear();
      }
    }
    if (has_createddate()) {
      if (createddate_ != &::google::protobuf::internal::kEmptyString) {
        createddate_->clear();
      }
    }
    if (has_senderpackage()) {
      if (senderpackage_ != &::google::protobuf::internal::kEmptyString) {
        senderpackage_->clear();
      }
    }
    if (has_targetpackage()) {
      if (targetpackage_ != &::google::protobuf::internal::kEmptyString) {
        targetpackage_->clear();
      }
    }
    if (has_centralstatus()) {
      if (centralstatus_ != NULL) centralstatus_->::eaglesakura_ace::CentralStatus::Clear();
    }
    if (has_geostatus()) {
      if (geostatus_ != NULL) geostatus_->::eaglesakura_ace::GeoPayload::Clear();
    }
  }
  sensorpayloads_.Clear();
  commandpayloads_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MasterPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .eaglesakura_ace.CentralStatus centralStatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_centralstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sensorPayloads;
        break;
      }

      // repeated .eaglesakura_ace.SensorPayload sensorPayloads = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorPayloads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensorpayloads()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sensorPayloads;
        if (input->ExpectTag(26)) goto parse_createdDate;
        break;
      }

      // required string createdDate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createdDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createddate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createddate().data(), this->createddate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_uniqueId;
        break;
      }

      // required string uniqueId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqueId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqueid().data(), this->uniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_commandPayloads;
        break;
      }

      // repeated .eaglesakura_ace.CommandPayload commandPayloads = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commandPayloads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commandpayloads()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_commandPayloads;
        if (input->ExpectTag(50)) goto parse_targetPackage;
        break;
      }

      // optional string targetPackage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetPackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetpackage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->targetpackage().data(), this->targetpackage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_senderPackage;
        break;
      }

      // required string senderPackage = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_senderPackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_senderpackage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->senderpackage().data(), this->senderpackage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_geoStatus;
        break;
      }

      // optional .eaglesakura_ace.GeoPayload geoStatus = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geoStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geostatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MasterPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .eaglesakura_ace.CentralStatus centralStatus = 1;
  if (has_centralstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->centralstatus(), output);
  }

  // repeated .eaglesakura_ace.SensorPayload sensorPayloads = 2;
  for (int i = 0; i < this->sensorpayloads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sensorpayloads(i), output);
  }

  // required string createdDate = 3;
  if (has_createddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createddate().data(), this->createddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->createddate(), output);
  }

  // required string uniqueId = 4;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->uniqueid(), output);
  }

  // repeated .eaglesakura_ace.CommandPayload commandPayloads = 5;
  for (int i = 0; i < this->commandpayloads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->commandpayloads(i), output);
  }

  // optional string targetPackage = 6;
  if (has_targetpackage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetpackage().data(), this->targetpackage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->targetpackage(), output);
  }

  // required string senderPackage = 7;
  if (has_senderpackage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->senderpackage().data(), this->senderpackage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->senderpackage(), output);
  }

  // optional .eaglesakura_ace.GeoPayload geoStatus = 8;
  if (has_geostatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->geostatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MasterPayload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .eaglesakura_ace.CentralStatus centralStatus = 1;
  if (has_centralstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->centralstatus(), target);
  }

  // repeated .eaglesakura_ace.SensorPayload sensorPayloads = 2;
  for (int i = 0; i < this->sensorpayloads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sensorpayloads(i), target);
  }

  // required string createdDate = 3;
  if (has_createddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createddate().data(), this->createddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->createddate(), target);
  }

  // required string uniqueId = 4;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uniqueid(), target);
  }

  // repeated .eaglesakura_ace.CommandPayload commandPayloads = 5;
  for (int i = 0; i < this->commandpayloads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->commandpayloads(i), target);
  }

  // optional string targetPackage = 6;
  if (has_targetpackage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetpackage().data(), this->targetpackage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->targetpackage(), target);
  }

  // required string senderPackage = 7;
  if (has_senderpackage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->senderpackage().data(), this->senderpackage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->senderpackage(), target);
  }

  // optional .eaglesakura_ace.GeoPayload geoStatus = 8;
  if (has_geostatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->geostatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MasterPayload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uniqueId = 4;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqueid());
    }

    // required string createdDate = 3;
    if (has_createddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createddate());
    }

    // required string senderPackage = 7;
    if (has_senderpackage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->senderpackage());
    }

    // optional string targetPackage = 6;
    if (has_targetpackage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetpackage());
    }

    // optional .eaglesakura_ace.CentralStatus centralStatus = 1;
    if (has_centralstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->centralstatus());
    }

    // optional .eaglesakura_ace.GeoPayload geoStatus = 8;
    if (has_geostatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geostatus());
    }

  }
  // repeated .eaglesakura_ace.SensorPayload sensorPayloads = 2;
  total_size += 1 * this->sensorpayloads_size();
  for (int i = 0; i < this->sensorpayloads_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sensorpayloads(i));
  }

  // repeated .eaglesakura_ace.CommandPayload commandPayloads = 5;
  total_size += 1 * this->commandpayloads_size();
  for (int i = 0; i < this->commandpayloads_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commandpayloads(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterPayload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MasterPayload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MasterPayload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MasterPayload::MergeFrom(const MasterPayload& from) {
  GOOGLE_CHECK_NE(&from, this);
  sensorpayloads_.MergeFrom(from.sensorpayloads_);
  commandpayloads_.MergeFrom(from.commandpayloads_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_createddate()) {
      set_createddate(from.createddate());
    }
    if (from.has_senderpackage()) {
      set_senderpackage(from.senderpackage());
    }
    if (from.has_targetpackage()) {
      set_targetpackage(from.targetpackage());
    }
    if (from.has_centralstatus()) {
      mutable_centralstatus()->::eaglesakura_ace::CentralStatus::MergeFrom(from.centralstatus());
    }
    if (from.has_geostatus()) {
      mutable_geostatus()->::eaglesakura_ace::GeoPayload::MergeFrom(from.geostatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MasterPayload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterPayload::CopyFrom(const MasterPayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterPayload::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_centralstatus()) {
    if (!this->centralstatus().IsInitialized()) return false;
  }
  if (has_geostatus()) {
    if (!this->geostatus().IsInitialized()) return false;
  }
  for (int i = 0; i < sensorpayloads_size(); i++) {
    if (!this->sensorpayloads(i).IsInitialized()) return false;
  }
  for (int i = 0; i < commandpayloads_size(); i++) {
    if (!this->commandpayloads(i).IsInitialized()) return false;
  }
  return true;
}

void MasterPayload::Swap(MasterPayload* other) {
  if (other != this) {
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(createddate_, other->createddate_);
    std::swap(senderpackage_, other->senderpackage_);
    std::swap(targetpackage_, other->targetpackage_);
    std::swap(centralstatus_, other->centralstatus_);
    std::swap(geostatus_, other->geostatus_);
    sensorpayloads_.Swap(&other->sensorpayloads_);
    commandpayloads_.Swap(&other->commandpayloads_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MasterPayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterPayload_descriptor_;
  metadata.reflection = MasterPayload_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace eaglesakura_ace

// @@protoc_insertion_point(global_scope)
