// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RemoteDeviceProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RemoteDeviceProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ControllPayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControllPayload_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterPayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterPayload_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_RemoteDeviceProtocol_2eproto() {
  protobuf_AddDesc_RemoteDeviceProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RemoteDeviceProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  ControllPayload_descriptor_ = file->message_type(0);
  static const int ControllPayload_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllPayload, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllPayload, extrapayload_),
  };
  ControllPayload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ControllPayload_descriptor_,
      ControllPayload::default_instance_,
      ControllPayload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllPayload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllPayload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ControllPayload));
  MasterPayload_descriptor_ = file->message_type(1);
  static const int MasterPayload_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterPayload, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterPayload, createddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterPayload, controller_),
  };
  MasterPayload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MasterPayload_descriptor_,
      MasterPayload::default_instance_,
      MasterPayload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterPayload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterPayload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MasterPayload));
  Command_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RemoteDeviceProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ControllPayload_descriptor_, &ControllPayload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MasterPayload_descriptor_, &MasterPayload::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RemoteDeviceProtocol_2eproto() {
  delete ControllPayload::default_instance_;
  delete ControllPayload_reflection_;
  delete MasterPayload::default_instance_;
  delete MasterPayload_reflection_;
}

void protobuf_AddDesc_RemoteDeviceProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032RemoteDeviceProtocol.proto\"8\n\017Controll"
    "Payload\022\017\n\007command\030\001 \002(\t\022\024\n\014extraPayload"
    "\030\002 \001(\014\"\\\n\rMasterPayload\022\020\n\010uniqueId\030\001 \002("
    "\t\022\023\n\013createdDate\030\002 \002(\t\022$\n\ncontroller\030\003 \002"
    "(\0132\020.ControllPayload*H\n\007Command\022\020\n\014AceBr"
    "oadcast\020\001\022\025\n\021CameraShotRequest\020\002\022\024\n\020Came"
    "raShotResult\020\003B+\n)com.eaglesakura.andrid"
    "ers.protocol.remote", 299);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RemoteDeviceProtocol.proto", &protobuf_RegisterTypes);
  ControllPayload::default_instance_ = new ControllPayload();
  MasterPayload::default_instance_ = new MasterPayload();
  ControllPayload::default_instance_->InitAsDefaultInstance();
  MasterPayload::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RemoteDeviceProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RemoteDeviceProtocol_2eproto {
  StaticDescriptorInitializer_RemoteDeviceProtocol_2eproto() {
    protobuf_AddDesc_RemoteDeviceProtocol_2eproto();
  }
} static_descriptor_initializer_RemoteDeviceProtocol_2eproto_;
const ::google::protobuf::EnumDescriptor* Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}
bool Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ControllPayload::kCommandFieldNumber;
const int ControllPayload::kExtraPayloadFieldNumber;
#endif  // !_MSC_VER

ControllPayload::ControllPayload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ControllPayload::InitAsDefaultInstance() {
}

ControllPayload::ControllPayload(const ControllPayload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ControllPayload::SharedCtor() {
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extrapayload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControllPayload::~ControllPayload() {
  SharedDtor();
}

void ControllPayload::SharedDtor() {
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    delete command_;
  }
  if (extrapayload_ != &::google::protobuf::internal::kEmptyString) {
    delete extrapayload_;
  }
  if (this != default_instance_) {
  }
}

void ControllPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControllPayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControllPayload_descriptor_;
}

const ControllPayload& ControllPayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RemoteDeviceProtocol_2eproto();
  return *default_instance_;
}

ControllPayload* ControllPayload::default_instance_ = NULL;

ControllPayload* ControllPayload::New() const {
  return new ControllPayload;
}

void ControllPayload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_command()) {
      if (command_ != &::google::protobuf::internal::kEmptyString) {
        command_->clear();
      }
    }
    if (has_extrapayload()) {
      if (extrapayload_ != &::google::protobuf::internal::kEmptyString) {
        extrapayload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ControllPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_extraPayload;
        break;
      }

      // optional bytes extraPayload = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extraPayload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extrapayload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ControllPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command(), output);
  }

  // optional bytes extraPayload = 2;
  if (has_extrapayload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->extrapayload(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ControllPayload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }

  // optional bytes extraPayload = 2;
  if (has_extrapayload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->extrapayload(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ControllPayload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

    // optional bytes extraPayload = 2;
    if (has_extrapayload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->extrapayload());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControllPayload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ControllPayload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ControllPayload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControllPayload::MergeFrom(const ControllPayload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_extrapayload()) {
      set_extrapayload(from.extrapayload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ControllPayload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllPayload::CopyFrom(const ControllPayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllPayload::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ControllPayload::Swap(ControllPayload* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(extrapayload_, other->extrapayload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ControllPayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControllPayload_descriptor_;
  metadata.reflection = ControllPayload_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MasterPayload::kUniqueIdFieldNumber;
const int MasterPayload::kCreatedDateFieldNumber;
const int MasterPayload::kControllerFieldNumber;
#endif  // !_MSC_VER

MasterPayload::MasterPayload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MasterPayload::InitAsDefaultInstance() {
  controller_ = const_cast< ::ControllPayload*>(&::ControllPayload::default_instance());
}

MasterPayload::MasterPayload(const MasterPayload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MasterPayload::SharedCtor() {
  _cached_size_ = 0;
  uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  controller_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterPayload::~MasterPayload() {
  SharedDtor();
}

void MasterPayload::SharedDtor() {
  if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqueid_;
  }
  if (createddate_ != &::google::protobuf::internal::kEmptyString) {
    delete createddate_;
  }
  if (this != default_instance_) {
    delete controller_;
  }
}

void MasterPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterPayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterPayload_descriptor_;
}

const MasterPayload& MasterPayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RemoteDeviceProtocol_2eproto();
  return *default_instance_;
}

MasterPayload* MasterPayload::default_instance_ = NULL;

MasterPayload* MasterPayload::New() const {
  return new MasterPayload;
}

void MasterPayload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uniqueid()) {
      if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
        uniqueid_->clear();
      }
    }
    if (has_createddate()) {
      if (createddate_ != &::google::protobuf::internal::kEmptyString) {
        createddate_->clear();
      }
    }
    if (has_controller()) {
      if (controller_ != NULL) controller_->::ControllPayload::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MasterPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uniqueId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqueid().data(), this->uniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_createdDate;
        break;
      }

      // required string createdDate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createdDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createddate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createddate().data(), this->createddate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_controller;
        break;
      }

      // required .ControllPayload controller = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_controller:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_controller()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MasterPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uniqueId = 1;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uniqueid(), output);
  }

  // required string createdDate = 2;
  if (has_createddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createddate().data(), this->createddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->createddate(), output);
  }

  // required .ControllPayload controller = 3;
  if (has_controller()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->controller(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MasterPayload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uniqueId = 1;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uniqueid(), target);
  }

  // required string createdDate = 2;
  if (has_createddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createddate().data(), this->createddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->createddate(), target);
  }

  // required .ControllPayload controller = 3;
  if (has_controller()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->controller(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MasterPayload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uniqueId = 1;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqueid());
    }

    // required string createdDate = 2;
    if (has_createddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createddate());
    }

    // required .ControllPayload controller = 3;
    if (has_controller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->controller());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterPayload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MasterPayload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MasterPayload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MasterPayload::MergeFrom(const MasterPayload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_createddate()) {
      set_createddate(from.createddate());
    }
    if (from.has_controller()) {
      mutable_controller()->::ControllPayload::MergeFrom(from.controller());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MasterPayload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterPayload::CopyFrom(const MasterPayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterPayload::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_controller()) {
    if (!this->controller().IsInitialized()) return false;
  }
  return true;
}

void MasterPayload::Swap(MasterPayload* other) {
  if (other != this) {
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(createddate_, other->createddate_);
    std::swap(controller_, other->controller_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MasterPayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterPayload_descriptor_;
  metadata.reflection = MasterPayload_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
